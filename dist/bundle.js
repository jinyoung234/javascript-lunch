(()=>{"use strict";var t={667:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  max-height: 620px;\n\n  padding: 24px 16px;\n  overflow: auto;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n\n  /* Firefox & IE & Edge */\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n/* Chrome, Safari */\n.modal-container::-webkit-scrollbar {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/components/common/CommonModal/CommonModal.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,+BAA+B;AACjC;;AAEA;EACE,eAAe;EACf,SAAS;EACT,WAAW;EACX,iBAAiB;;EAEjB,kBAAkB;EAClB,cAAc;;EAEd,8BAA8B;EAC9B,2BAA2B;;EAE3B,wBAAwB;EACxB,qBAAqB;EACrB,wBAAwB;AAC1B;;AAEA,mBAAmB;AACnB;EACE,aAAa;AACf",sourcesContent:[".modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  max-height: 620px;\n\n  padding: 24px 16px;\n  overflow: auto;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n\n  /* Firefox & IE & Edge */\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n/* Chrome, Safari */\n.modal-container::-webkit-scrollbar {\n  display: none;\n}\n"],sourceRoot:""}]);const o=i},556:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/GlobalNavigationBar/GlobalNavigationBar.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;;EAEZ,eAAe;;EAEf,sCAAsC;AACxC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;;EAEZ,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB",sourcesContent:[".gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n"],sourceRoot:""}]);const o=i},224:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".modal-title {\n  margin-bottom: 24px;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/LunchApp/LunchApp.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB",sourcesContent:[".modal-title {\n  margin-bottom: 24px;\n}\n"],sourceRoot:""}]);const o=i},418:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,'.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 24px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: "*";\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  width: 100%;\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name="name"],\ninput[name="link"] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n',"",{version:3,sources:["webpack://./src/components/lunch/RestaurantAddForm/RestaurantAddForm.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,iBAAiB;;EAEjB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;;EAEZ,YAAY;;EAEZ,iCAAiC;EACjC,kBAAkB;;EAElB,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;;EAEZ,kBAAkB;;EAElB,YAAY;EACZ,kBAAkB;;EAElB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,uBAAuB;;EAEvB,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;;EAEhC,sBAAsB;AACxB",sourcesContent:['.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 24px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: "*";\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  width: 100%;\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name="name"],\ninput[name="link"] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n'],sourceRoot:""}]);const o=i},644:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,"#restaurant-detail-url {\n  display: inline-block;\n  color: var(--grey-500);\n  margin-bottom: 32px;\n  margin-top: 16px;\n}\n\n#restaurant-detail-distance {\n  margin: 16px 0px;\n  color: var(--primary-color);\n}\n\n#restaurant-detail-category {\n  margin-bottom: 16px;\n}\n\n#restaurant-detail-header {\n  display: flex;\n  justify-content: space-between;\n}\n\na:focus {\n  outline: none;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/RestaurantDetailModal/RestaurantDetailModal.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,2BAA2B;AAC7B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,aAAa;AACf",sourcesContent:["#restaurant-detail-url {\n  display: inline-block;\n  color: var(--grey-500);\n  margin-bottom: 32px;\n  margin-top: 16px;\n}\n\n#restaurant-detail-distance {\n  margin: 16px 0px;\n  color: var(--primary-color);\n}\n\n#restaurant-detail-category {\n  margin-bottom: 16px;\n}\n\n#restaurant-detail-header {\n  display: flex;\n  justify-content: space-between;\n}\n\na:focus {\n  outline: none;\n}\n"],sourceRoot:""}]);const o=i},941:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n  width: 100%;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n#restaurant-info-container {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  word-break: break-all;\n\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/RestaurantItem/RestaurantItem.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;;EAEvB,iBAAiB;EACjB,WAAW;;EAEX,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;;EAEhB,kBAAkB;;EAElB,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;AAC7B;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;;EAErB,qBAAqB;EACrB,4BAA4B;AAC9B",sourcesContent:[".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n  width: 100%;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n#restaurant-info-container {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  word-break: break-all;\n\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n"],sourceRoot:""}]);const o=i},518:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/RestaurantList/RestaurantList.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,eAAe;EACf,cAAc;AAChB",sourcesContent:[".restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n"],sourceRoot:""}]);const o=i},258:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".open {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0 16px;\n}\n\n.open select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.close {\n  display: none;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/RestaurantTab/RestaurantTab.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;AACd",sourcesContent:[".open {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0 16px;\n}\n\n.open select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.close {\n  display: none;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n"],sourceRoot:""}]);const o=i},539:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,".restaurant-tab-header-button {\n  height: 35px;\n  text-align: center;\n  flex: 1;\n  padding-bottom: 8px;\n  background-color: white;\n  cursor: pointer;\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.restaurant-tab-header-text {\n  display: inline-block;\n  width: 100%;\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 700;\n  letter-spacing: 0.5px;\n}\n\n.tab-active {\n  border: none;\n  border-bottom: 2px solid var(--primary-color);\n}\n\n.tab-inactive {\n  border: none;\n  border-bottom: 2px solid var(--grey-200);\n}\n\n.tab-text-active {\n  color: var(--primary-color);\n}\n\n.tab-text-inactive {\n  color: var(--grey-300);\n}\n","",{version:3,sources:["webpack://./src/components/lunch/RestaurantTab/RestaurantTabButton/RestaurantTabButton.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,kBAAkB;EAClB,OAAO;EACP,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,6CAA6C;AAC/C;;AAEA;EACE,YAAY;EACZ,wCAAwC;AAC1C;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:[".restaurant-tab-header-button {\n  height: 35px;\n  text-align: center;\n  flex: 1;\n  padding-bottom: 8px;\n  background-color: white;\n  cursor: pointer;\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.restaurant-tab-header-text {\n  display: inline-block;\n  width: 100%;\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 700;\n  letter-spacing: 0.5px;\n}\n\n.tab-active {\n  border: none;\n  border-bottom: 2px solid var(--primary-color);\n}\n\n.tab-inactive {\n  border: none;\n  border-bottom: 2px solid var(--grey-200);\n}\n\n.tab-text-active {\n  color: var(--primary-color);\n}\n\n.tab-text-inactive {\n  color: var(--grey-300);\n}\n"],sourceRoot:""}]);const o=i},531:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,"#restaurant-tab-header {\n  display: flex;\n  height: 35px;\n  margin: 32px 16px;\n}\n\nrestaurant-tab-button {\n  width: 100%;\n  display: flex;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/RestaurantTab/RestaurantTabHeader/RestaurantTabHeader.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,aAAa;AACf",sourcesContent:["#restaurant-tab-header {\n  display: flex;\n  height: 35px;\n  margin: 32px 16px;\n}\n\nrestaurant-tab-button {\n  width: 100%;\n  display: flex;\n}\n"],sourceRoot:""}]);const o=i},744:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,"#star-icon {\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/components/lunch/StarIcon/StarIcon.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB",sourcesContent:["#star-icon {\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const o=i},771:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,"/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n","",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAAA,mDAAmD;AACnD;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA,mDAAmD;AACnD;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB",sourcesContent:["/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n"],sourceRoot:""}]);const o=i},434:(t,n,e)=>{e.d(n,{Z:()=>o});var a=e(537),r=e.n(a),s=e(645),i=e.n(s)()(r());i.push([t.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n}\n","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;EAEE,uBAAuB;EACvB,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n}\n"],sourceRoot:""}]);const o=i},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",a=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),a&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),a&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,a,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(a)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(i[l]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);a&&i[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(r," */");return[n].concat([s]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,a=0;a<n.length;a++)if(n[a].identifier===t){e=a;break}return e}function a(t,a){for(var s={},i=[],o=0;o<t.length;o++){var l=t[o],c=a.base?l[0]+a.base:l[0],d=s[c]||0,A="".concat(c," ").concat(d);s[c]=d+1;var u=e(A),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var p=r(m,a);a.byIndex=o,n.splice(o,0,{identifier:A,updater:p,references:1})}i.push(A)}return i}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var s=a(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<s.length;i++){var o=e(s[i]);n[o].references--}for(var l=a(t,r),c=0;c<s.length;c++){var d=e(s[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}s=l}}},569:t=>{var n={};t.exports=function(t,e){var a=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,r&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var s=e.sourceMap;s&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(a,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(a){var r=n[a];if(void 0!==r)return r.exports;var s=n[a]={id:a,exports:{}};return t[a](s,s.exports,e),s.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var a=n.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),a=e(795),r=e.n(a),s=e(569),i=e.n(s),o=e(565),l=e.n(o),c=e(216),d=e.n(c),A=e(589),u=e.n(A),m=e(771),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=i().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=d(),n()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var h=e(434),g={};g.styleTagTransform=u(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=d(),n()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var b=e(224),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),n()(b.Z,f),b.Z&&b.Z.locals&&b.Z.locals;class E extends HTMLElement{connectedCallback(){this.render(),this.setEvent()}disconnectedCallback(){this.removeEvent()}render(){}setEvent(){}removeEvent(){}getTemplate(){return""}emit(t,n){const e=new CustomEvent(t,{bubbles:!0,detail:n});this.dispatchEvent(e)}on({target:t,eventName:n,eventHandler:e}){t.addEventListener(n,e)}off({target:t,eventName:n,eventHandler:e}){t.removeEventListener(n,e)}}const v=E;customElements.define("lunch-app",class extends v{render(){this.innerHTML="\n      <global-navigation-bar></global-navigation-bar>\n      <main>\n        <restaurant-tab class='restaurant-filter-container'></restaurant-tab>\n      </main>\n      <restaurant-add-modal></restaurant-add-modal>\n      <restaurant-detail-modal></restaurant-detail-modal>\n    "}});var C=e(556),x={};x.styleTagTransform=u(),x.setAttributes=l(),x.insert=i().bind(null,"head"),x.domAPI=r(),x.insertStyleElement=d(),n()(C.Z,x),C.Z&&C.Z.locals&&C.Z.locals;const B=e.p+"add-button.png",y=(t,n=document)=>n.querySelector(t),w="#gnb-button",T="#modal-cancel-button",k="#restaurant-add-form",R="#name-input",L={sortChange:"sortChange",rerenderRestaurantList:"rerenderRestaurantList",filterCategory:"filterCategory",resetForm:"resetForm",restaurantDetailModalOpen:"restaurantDetailModalOpen",restaurantDetailModalClose:"restaurantDetailModalClose",restaurantAddModalOpen:"restaurantAddModalOpen",restaurantAddModalClose:"restaurantAddModalClose",rerenderModal:"rerenderModal",changeTab:"changeTab"};customElements.define("global-navigation-bar",class extends v{constructor(){super(...arguments),this.eventListeners={gnbButtonClick:{eventName:"click",eventHandler:this.handleOpenModal.bind(this)}}}render(){this.innerHTML=`\n        <header class="gnb">\n            <h1 class="gnb__title text-title">점심 뭐 먹지</h1>\n            <button id="gnb-button" type="button" class="gnb__button" aria-label="음식점 추가">\n              <img src=${B} alt="음식점 추가">\n            </button>\n        </header>\n        `}setEvent(){this.on({...this.eventListeners.gnbButtonClick,target:y(w)??document})}handleOpenModal(){this.emit(L.restaurantAddModalOpen)}removeEvent(){this.off({...this.eventListeners.gnbButtonClick,target:y(w)??document})}});var M=e(518),Z={};Z.styleTagTransform=u(),Z.setAttributes=l(),Z.insert=i().bind(null,"head"),Z.domAPI=r(),Z.insertStyleElement=d(),n()(M.Z,Z),M.Z&&M.Z.locals&&M.Z.locals;const D="restaurantDetail",S={get(){const t=localStorage.getItem(D);return t?JSON.parse(t):[]},set(t){const n=this.get();n.push(t),localStorage.setItem(D,JSON.stringify(n))},update(t){localStorage.setItem(D,JSON.stringify(t))},remove(t){const n=this.get().filter((({name:n})=>n!==t));localStorage.setItem(D,JSON.stringify(n))}},$=/^((http|https):\/\/.)[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/,I={validationTypes:{emptyCategory:{errorMessage:"입력한 카테고리가 존재하지 않습니다. 다시 입력해 주세요.",isValid:({userInputRestaurantDetail:t})=>""!==t.category},emptyRestaurantName:{errorMessage:"입력한 음식점 이름이 존재하지 않습니다. 다시 입력해 주세요.",isValid:({userInputRestaurantDetail:t})=>""!==t.name},emptyDistance:{errorMessage:"입력한 거리가 존재하지 않습니다. 다시 입력해 주세요.",isValid:({userInputRestaurantDetail:t})=>""!==t.distance},duplicateNames:{errorMessage:"중복된 음식점 이름이 존재합니다. 다시 입력해주세요.",isValid:({userInputRestaurantDetail:t,restaurantDetails:n})=>n.every((n=>n.name!==t.name))},invalidUrlFormat:{errorMessage:"유효하지 않은 이메일 형식 입니다. 다시 입력해주세요.",isValid:({userInputRestaurantDetail:t})=>""===t.url||$.test(t?.url??"")}},check(t,n){var e,a;e=this.validationTypes,a={userInputRestaurantDetail:t,restaurantDetails:n},Object.values(e).forEach((({errorMessage:t,isValid:n})=>{if(!n(a))throw new Error(t)}))}},_={all:"전체",korean:"한식",chinese:"중식",japanese:"일식",western:"양식",asian:"아시안",others:"기타"},H={name:"이름순",distance:"거리순"},j="all",N="favorite",O=class{constructor(t=S){this.currentCategory=_.all,this.sortType=H.name,this.storage=t,this.restaurantsDetails=this.getSortedRestaurants(this.currentCategory,this.sortType)}getSortedRestaurants(t,n,e){const a=e===N;return this.storage.get().filter((t=>!a||t.isFavorite)).filter((n=>t===_.all||n.category===t)).sort(n===H.name?(t,n)=>t.name.localeCompare(n.name):(t,n)=>Number(t.distance)-Number(n.distance))}getRestaurantDetails(){return this.restaurantsDetails}updateRestaurants(t,n){this.restaurantsDetails=this.getSortedRestaurants(this.currentCategory,t,n)}addRestaurant(t){this.storage.set(t),this.updateRestaurants(this.sortType)}sortRestaurants(t){this.sortType=t,this.updateRestaurants(t)}filterRestaurants(t,n=H.name){this.currentCategory=t,this.updateRestaurants(n)}validateRestaurantDetail(t){I.check(t,this.restaurantsDetails)}getRestaurantDetailByName(t){return this.storage.get().find((n=>n.name===t))}updateRestaurantDetailInIsFavorite(t){const n=this.storage.get().map((n=>n.name===t?{...n,isFavorite:!n.isFavorite}:{...n}));this.storage.update(n)}removeRestaurantDetail(t){this.storage.remove(t)}};customElements.define("restaurant-list",class extends v{constructor(){super(...arguments),this.restaurant=new O(S),this.sortType=H.name,this.tabStatus=this.getAttribute("status"),this.eventListeners={rerenderRestaurantList:{eventName:L.rerenderRestaurantList,eventHandler:this.handleRerenderRestaurantList.bind(this)},sortChange:{eventName:L.sortChange,eventHandler:this.handleSortRestaurantItems.bind(this)},filterCategory:{eventName:L.filterCategory,eventHandler:this.handleFilterRestaurantItems.bind(this)}}}render(){this.innerHTML=`\n      <section class="restaurant-list-container">\n        <ul class="restaurant-list">\n          ${this.createRestaurantItems()}\n        </ul> \n      </section>\n    `}createRestaurantItems(){return this.restaurant.updateRestaurants(this.sortType,this.tabStatus),this.restaurant.getRestaurantDetails().reduce(((t,{name:n,category:e,distance:a,description:r,isFavorite:s})=>t+`\n          <li>\n            <restaurant-item \n              name="${n}"\n              category="${e}"\n              distance="${a}"\n              description="${r}"\n              isFavorite="${s}"\n              class="restaurant"\n            ></restaurant-item>\n          </li>`),"")}setEvent(){this.on({...this.eventListeners.rerenderRestaurantList,target:document}),this.on({...this.eventListeners.sortChange,target:document}),this.on({...this.eventListeners.filterCategory,target:document})}handleRerenderRestaurantList(){this.connectedCallback()}handleSortRestaurantItems(t){if(t instanceof CustomEvent){const n=t.detail;this.sortType=n,this.restaurant.sortRestaurants(n),this.connectedCallback()}}handleFilterRestaurantItems(t){if(t instanceof CustomEvent){const n=t.detail;this.restaurant.filterRestaurants(n,this.sortType),this.connectedCallback()}}removeEvent(){this.off({...this.eventListeners.rerenderRestaurantList,target:document}),this.off({...this.eventListeners.sortChange,target:document}),this.off({...this.eventListeners.filterCategory,target:document})}});var F=e(941),Y={};Y.styleTagTransform=u(),Y.setAttributes=l(),Y.insert=i().bind(null,"head"),Y.domAPI=r(),Y.insertStyleElement=d(),n()(F.Z,Y),F.Z&&F.Z.locals&&F.Z.locals;customElements.define("restaurant-item",class extends v{constructor(){super(...arguments),this.eventListeners={listItemClick:{eventName:"click",eventHandler:this.handleClickItem.bind(this)}}}render(){const t=this.getAttribute("category")??"",n=this.getAttribute("name")??"",e=this.getAttribute("distance")??"",a=this.getAttribute("description")??"",r=this.getAttribute("isFavorite")??"";this.innerHTML=`\n        <div class='restaurant__category'>\n          <category-icon class='category-icon' category='${t}'></category-icon>\n        </div>\n        <div id='restaurant-info-container'>\n          <div class='restaurant__info'>\n            <h3 class='restaurant__name text-subtitle'>${n}</h3>\n            <span class='restaurant__distance text-body'>캠퍼스로부터 ${e}분 내</span>\n            <p class='restaurant__description text-body'>${a}</p>\n          </div>\n          <star-icon name='${n}' favorite='${r}'></star-icon>\n        </div>\n    `}setEvent(){this.on({...this.eventListeners.listItemClick,target:this})}handleClickItem(t){if(t.currentTarget instanceof HTMLElement){const n=y("h3",t.currentTarget)?.textContent;if("string"!=typeof n)return;const e=(new O).getRestaurantDetailByName(n);this.emit(L.restaurantDetailModalOpen,e)}}removeEvent(){this.off({...this.eventListeners.listItemClick,target:this})}});var z=e(418),q={};q.styleTagTransform=u(),q.setAttributes=l(),q.insert=i().bind(null,"head"),q.domAPI=r(),q.insertStyleElement=d(),n()(z.Z,q),z.Z&&z.Z.locals&&z.Z.locals;const{emptyCategory:W,emptyRestaurantName:P,emptyDistance:X,duplicateNames:U,invalidUrlFormat:V}=I.validationTypes,J={[W.errorMessage]:"#category-select>select",[P.errorMessage]:R,[X.errorMessage]:"#distance-select>select",[U.errorMessage]:R,[V.errorMessage]:"#url-input"},G=t=>t in L;class Q extends v{constructor(){super(...arguments),this.eventListeners={resetForm:{eventName:L.resetForm,eventHandler:this.handleResetForm.bind(this)},restaurantAddFormSubmit:{eventName:"submit",eventHandler:this.handleSubmitAddRestaurant.bind(this)},modalCancelButtonClick:{eventName:"click",eventHandler:this.handleCancelButton.bind(this)}}}render(){const t=Object.values(_).slice(1);this.innerHTML=`\n        <form id="restaurant-add-form">\n            <common-form-item\n              for='category'\n              classList='form-item--required'\n              labelText='카테고리'\n            >\n              <common-dropdown name='category' id='category-select' options='${t}' title='선택해 주세요'></common-dropdown>\n            </common-form-item>\n            <common-form-item\n              for='name'\n              classList='form-item--required'\n              labelText='이름'\n            >\n              <input type='text' name='name' id='name-input' required>\n            </common-form-item>\n            <common-form-item\n              for="distance"\n              classList="form-item--required"\n              labelText="거리(도보 이동 시간)"\n            >\n              <common-dropdown name='distance' addOptionText='분 내' id='distance-select' options='${Q.DISTANCES_OPTIONS}' title='선택해 주세요' /></common-dropdown>\n            </common-form-item>\n            <common-form-item\n              for="description"\n              labelText="설명"\n            >\n              <textarea name='description' id='description-textarea' cols='30' rows='5'></textarea>\n              <span class='help-text text-caption'>메뉴 등 추가 정보를 입력해 주세요.</span>\n            </common-form-item>\n            <common-form-item\n              for="url"\n              labelText="참고 링크"\n            >\n              <input type='text' name='url' id='url-input'/>\n              <span class='help-text text-caption'>매장 정보를 확인할 수 있는 링크를 입력해 주세요.</span>\n            </common-form-item>\n            <div class="button-container">\n              <button id="modal-cancel-button" type="button" class="button button--secondary text-caption">취소하기</button>\n              <button type="submit" class="button button--primary text-caption">추가하기</button>\n            </div>\n        </form>\n    `}setEvent(){this.on({...this.eventListeners.restaurantAddFormSubmit,target:document}),this.on({...this.eventListeners.resetForm,target:y(k)??document}),this.on({...this.eventListeners.modalCancelButtonClick,target:y(k)??document})}handleResetForm(){const t=y(k);t instanceof HTMLFormElement&&t.reset()}handleSubmitAddRestaurant(t){try{t.preventDefault(),this.addUserInputRestaurantDetail(),this.handleResetForm(),this.emit(L.rerenderRestaurantList),this.emit(L.restaurantAddModalClose)}catch(t){this.handleError(t)}}handleError(t){if(t instanceof Error){alert(t.message);const n=t.message;(t=>t in J)(n)&&y(J[n]).focus()}}addUserInputRestaurantDetail(){const t=this.createFormDataToRestaurantDetail();if(t){const n=new O;n.validateRestaurantDetail(t),n.addRestaurant(t)}}createFormDataToRestaurantDetail(){const t=y(k);if(t instanceof HTMLFormElement){const n=new FormData(t),e={};for(const[t,a]of n.entries())e[t]=a;if((t=>Object.keys(t).every((t=>["category","name","distance","description","url"].includes(t))))(e))return{...e,isFavorite:!1}}throw new Error("잘못 입력하셨습니다. 다시 입력해주세요.")}handleCancelButton(t){const n=t.target;n instanceof HTMLElement&&!n.matches(T)||(this.handleResetForm(),this.emit(L.restaurantAddModalClose))}removeEvent(){this.off({...this.eventListeners.restaurantAddFormSubmit,target:document}),this.off({...this.eventListeners.resetForm,target:y(k)??document}),this.off({...this.eventListeners.modalCancelButtonClick,target:y(k)??document})}}Q.DISTANCES_OPTIONS=["5","10","15","20","30"],customElements.define("restaurant-add-form",Q);var K=e(644),tt={};tt.styleTagTransform=u(),tt.setAttributes=l(),tt.insert=i().bind(null,"head"),tt.domAPI=r(),tt.insertStyleElement=d(),n()(K.Z,tt),K.Z&&K.Z.locals&&K.Z.locals,customElements.define("restaurant-detail-modal",class extends v{constructor(){super(...arguments),this.restaurantDetail=null,this.eventListeners={restaurantDetailModalOpen:{eventName:L.restaurantDetailModalOpen,eventHandler:this.handleOpenRestaurantDetailModal.bind(this)},restaurantDetailModalClose:{eventName:"click",eventHandler:this.handleCloseRestaurantDetailModal.bind(this)}}}render(){this.innerHTML=`\n      <common-modal\n        open="${L.restaurantDetailModalOpen}"\n        close="${L.restaurantDetailModalClose}"\n        targetSelector="#restaurant-detail-modal"  \n        id="restaurant-detail-modal"\n      >\n        ${this.restaurantDetail?`<restaurant-detail-modal-content \n                name='${this.restaurantDetail.name}'\n                category='${this.restaurantDetail.category}'\n                description='${this.restaurantDetail.description}'\n                distance='${this.restaurantDetail.distance}'\n                isFavorite='${this.restaurantDetail.isFavorite}'\n                url='${this.restaurantDetail.url}'\n              ></restaurant-detail-modal-content>`:""}\n      </common-modal>\n    `}setEvent(){this.on({...this.eventListeners.restaurantDetailModalOpen,target:document}),this.on({...this.eventListeners.restaurantDetailModalClose,target:this})}handleOpenRestaurantDetailModal(t){t instanceof CustomEvent&&(this.restaurantDetail=t.detail,this.connectedCallback())}handleCloseRestaurantDetailModal(t){const n=y(T,this);t.target===n&&this.emit(L.restaurantDetailModalClose)}removeEvent(){this.off({...this.eventListeners.restaurantDetailModalOpen,target:document}),this.off({...this.eventListeners.restaurantDetailModalClose,target:this})}}),customElements.define("restaurant-detail-modal-content",class extends v{constructor(){super(...arguments),this.eventListeners={deleteRestaurantItem:{eventName:"click",eventHandler:this.handleDeleteRestaurantItem.bind(this)},rerenderModal:{eventName:L.rerenderModal,eventHandler:this.handleRerenderModalContent.bind(this)}}}render(){const t=this.getAttribute("name")??"",n=(new O).getRestaurantDetailByName(t);this.innerHTML=`\n      <div id='restaurant-detail-header'>\n        <div id='restaurant-detail-category' class='restaurant__category'>\n          <category-icon category='${n?.category}'></category-icon>\n        </div>\n        <star-icon name='${t}' favorite='${n?.isFavorite}'></star-icon>\n      </div>\n      <div class='restaurant__info'>\n        <h3 class='restaurant__name text-subtitle'>${t}</h3>\n        <span id='restaurant-detail-distance' class='text-body'>캠퍼스로부터 ${n?.distance}분 내</span>\n        <p class='restaurant__description text-body'>${n?.description}</p>\n      </div>\n      <a target='_blank' href='${n?.url}' id='restaurant-detail-url'>\n        <div border='0'>${n?.url}</div>\n      </a>\n      <div class='button-container'>\n        <button id='modal-delete-button' type='button' class='button button--secondary text-caption'>삭제하기</button>\n        <button id='modal-cancel-button' type='button' class='button button--primary text-caption'>닫기</button>\n      </div>\n    `}setEvent(){this.on({...this.eventListeners.deleteRestaurantItem,target:this}),this.on({...this.eventListeners.rerenderModal,target:this})}handleDeleteRestaurantItem(t){const n=y("#modal-delete-button",this),e=this.getAttribute("name")??"";t.target===n&&((new O).removeRestaurantDetail(e),this.emit(L.rerenderRestaurantList),this.emit(L.restaurantDetailModalClose))}handleRerenderModalContent(){this.connectedCallback()}removeEvent(){this.off({...this.eventListeners.deleteRestaurantItem,target:this}),this.off({...this.eventListeners.rerenderModal,target:this})}}),customElements.define("restaurant-add-modal",class extends v{render(){this.innerHTML=`\n        <common-modal\n            id="restaurant-add-modal"\n            targetSelector="#restaurant-add-modal"  \n            open="${L.restaurantAddModalOpen}"\n            close="${L.restaurantAddModalClose}"\n        >\n            <h2 class='modal-title text-title'>새로운 음식점</h2>\n            <restaurant-add-form></restaurant-add-form>\n        </common-modal>\n    `}});var nt=e(258),et={};et.styleTagTransform=u(),et.setAttributes=l(),et.insert=i().bind(null,"head"),et.domAPI=r(),et.insertStyleElement=d(),n()(nt.Z,et),nt.Z&&nt.Z.locals&&nt.Z.locals;customElements.define("restaurant-tab",class extends v{constructor(){super(...arguments),this.tabStatus=j,this.eventListeners={changeTab:{eventName:L.changeTab,eventHandler:this.handleChangeTabStatus.bind(this)}}}render(){this.innerHTML=`\n      <restaurant-tab-header\n        status="${this.tabStatus}"\n      ></restaurant-tab-header>\n      <restaurant-tab-body\n        status="${this.tabStatus}"\n      ></restaurant-tab-body>\n    `}setEvent(){this.on({...this.eventListeners.changeTab,target:document})}handleChangeTabStatus(t){t instanceof CustomEvent&&(this.tabStatus=t.detail,this.connectedCallback())}removeEvent(){this.off({...this.eventListeners.changeTab,target:document})}});var at=e(531),rt={};rt.styleTagTransform=u(),rt.setAttributes=l(),rt.insert=i().bind(null,"head"),rt.domAPI=r(),rt.insertStyleElement=d(),n()(at.Z,rt),at.Z&&at.Z.locals&&at.Z.locals;customElements.define("restaurant-tab-header",class extends v{render(){const t=this.getAttribute("status");this.innerHTML=`\n        <nav id='restaurant-tab-header'>\n            <restaurant-tab-button\n              isActiveTab='${t===j}'\n              id='${j}'\n              text='모든 음식점'\n            ></restaurant-tab-button>\n            <restaurant-tab-button\n              isActiveTab='${t===N}'\n              id='${N}'\n              text='자주 가는 음식점'\n            ></restaurant-tab-button>\n        </nav>\n    `}});customElements.define("restaurant-tab-body",class extends v{render(){const t=this.getAttribute("status")??"",n=Object.values(_),e=Object.values(H);this.innerHTML=`\n      <div id='restaurant-dropdown-container' class='${t===N?"close":"open"}'>\n        <common-dropdown \n          id='category-filter' \n          classList='restaurant-filter' \n          eventType='${L.filterCategory}' \n          target='#category-filter' \n          options='${n}' \n        >\n        </common-dropdown>            \n        <common-dropdown \n          id='sorting-filter' \n          classList='restaurant-filter' \n          eventType='${L.sortChange}' \n          target='#sorting-filter' \n          options='${e}'\n        >\n        </common-dropdown>\n      </div>\n      <restaurant-list\n        status='${t}'\n      ></restaurant-list>\n    `}});var st=e(539),it={};it.styleTagTransform=u(),it.setAttributes=l(),it.insert=i().bind(null,"head"),it.domAPI=r(),it.insertStyleElement=d(),n()(st.Z,it),st.Z&&st.Z.locals&&st.Z.locals;customElements.define("restaurant-tab-button",class extends v{constructor(){super(...arguments),this.eventListeners={buttonClick:{eventName:"click",eventHandler:this.handleClick.bind(this)}}}render(){const t=this.getAttribute("isActiveTab"),n=this.getAttribute("id"),e=this.getAttribute("text");this.innerHTML=`\n      <button type='button' id='${n}' class='${"true"===t?"tab-active":"tab-inactive"} restaurant-tab-header-button'>\n        <span class='${"true"===t?"tab-text-active":"tab-text-inactive"} restaurant-tab-header-text'>${e}</span>\n      </button>\n    `}setEvent(){this.on({...this.eventListeners.buttonClick,target:y("button",this)})}handleClick(t){t.currentTarget instanceof HTMLButtonElement&&this.emit(L.changeTab,t.currentTarget.id)}removeEvent(){this.off({...this.eventListeners.buttonClick,target:y("button",this)})}});const ot=e.p+"category-korean.png",lt=e.p+"category-asian.png",ct=e.p+"category-chinese.png",dt=e.p+"category-etc.png",At=e.p+"category-japanese.png",ut=e.p+"category-western.png",mt=e.p+"favorite-icon-filled.png",pt=e.p+"favorite-icon-lined.png";customElements.define("category-icon",class extends v{constructor(){super(...arguments),this.categoryImage={아시안:lt,양식:ut,일식:At,중식:ct,한식:ot,기타:dt}}render(){const t=this.getAttribute("category")??"";var n;n=t,Object.values(_).some((t=>n!==_.all&&t===n))&&(this.innerHTML=`\n        <img src=${this.convertCategoryToImage(t)} alt=${t}>\n      `)}convertCategoryToImage(t){return this.categoryImage[t]}});var ht=e(744),gt={};gt.styleTagTransform=u(),gt.setAttributes=l(),gt.insert=i().bind(null,"head"),gt.domAPI=r(),gt.insertStyleElement=d(),n()(ht.Z,gt),ht.Z&&ht.Z.locals&&ht.Z.locals,customElements.define("star-icon",class extends v{constructor(){super(...arguments),this.eventListeners={starIconClick:{eventName:"click",eventHandler:this.handleClickStarIcon.bind(this)}}}render(){const t="true"===this.getAttribute("favorite");this.innerHTML=`\n            <img id='star-icon' src='${t?mt:pt}' alt='${t?"favoriteStar":"nonFavoriteStar"}' />`}setEvent(){this.on({...this.eventListeners.starIconClick,target:this})}handleClickStarIcon(t){const n=t.target;if(n instanceof HTMLElement&&n.matches("img")){const t=this.getAttribute("name")??"";(new O).updateRestaurantDetailInIsFavorite(t),this.emit(L.rerenderRestaurantList),this.emit(L.rerenderModal)}}removeEvent(){this.off({...this.eventListeners.starIconClick,target:this})}}),customElements.define("common-dropdown",class extends v{constructor(){super(...arguments),this.eventListeners={dropDown:{eventName:"change",eventHandler:this.handleChange.bind(this)}}}render(){const t=this.getAttribute("id"),n=this.getAttribute("classList"),e=this.getAttribute("name"),a=this.getAttribute("options")?.split(","),r=this.getAttribute("title"),s=this.getAttribute("addOptionText");this.innerHTML=`\n        <select name="${e??""}" id="${t}" class="${n}">\n            ${r?`<option value="">${r}</option>`:""}\n\n            ${((t,n=(t=>t))=>Object.values(t).map((t=>`<option value=${t}>${n(t)}</option>`)).join(""))(a??[],s?t=>`${t}${s}`:t=>t)}\n        </select>\n    `}setEvent(){const t=this.getAttribute("target");t&&this.on({...this.eventListeners.dropDown,target:y(t??"")??document})}handleChange(t){const n=this.getAttribute("eventType");if(!n||!G(n))return;const e=t?.target;if(!(e instanceof HTMLSelectElement))return;const a=e.value;this.emit(L[n],a)}removeEvent(){const t=this.getAttribute("target");t&&this.off({...this.eventListeners.dropDown,target:y(t??"")??document})}});var bt=e(667),ft={};ft.styleTagTransform=u(),ft.setAttributes=l(),ft.insert=i().bind(null,"head"),ft.domAPI=r(),ft.insertStyleElement=d(),n()(bt.Z,ft),bt.Z&&bt.Z.locals&&bt.Z.locals,customElements.define("common-modal",class extends v{constructor(){super(...arguments),this.eventHandlers={handleOpen:t=>this.handleOpen(t),handleClose:t=>this.handleClose(t)}}render(){const t=this.innerHTML;this.innerHTML=`\n        <dialog id="common-modal-dialog">\n          <div class="modal-backdrop"></div>\n          <div class="modal-container">\n            ${t}\n          </div>\n        </dialog>\n      `}setEvent(){const t=this.getAttribute("open")??"",n=this.getAttribute("close")??"",e=this.getAttribute("targetSelector")??"";G(t)&&G(n)&&(this.on({eventName:t,eventHandler:this.eventHandlers.handleOpen.bind(this,e),target:document}),this.on({eventName:n,eventHandler:this.eventHandlers.handleClose.bind(this,e),target:document}))}removeEvent(){const t=this.getAttribute("open")??"",n=this.getAttribute("close")??"",e=this.getAttribute("targetSelector")??"";G(t)&&G(n)&&(this.off({eventName:t,eventHandler:this.eventHandlers.handleOpen.bind(this,e),target:document}),this.off({eventName:n,eventHandler:this.eventHandlers.handleClose.bind(this,e),target:document}))}handleOpen(t){const n=y(`${t}>dialog`);n instanceof HTMLDialogElement&&n.showModal()}handleClose(t){const n=y(`${t}>dialog`);n instanceof HTMLDialogElement&&n.close()}}),customElements.define("common-form-item",class extends v{render(){const t=this.getAttribute("for")??"",n=this.getAttribute("classList")??"",e=this.getAttribute("labelText")??"",a=this.innerHTML;this.innerHTML=`\n            <div class="form-item ${n}">\n                <label for="${t}" text-caption">${e}</label>\n                ${a}\n            </div>\n        `}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvbW1vbk1vZGFsL0NvbW1vbk1vZGFsLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL0dsb2JhbE5hdmlnYXRpb25CYXIvR2xvYmFsTmF2aWdhdGlvbkJhci5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9MdW5jaEFwcC9MdW5jaEFwcC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50QWRkRm9ybS9SZXN0YXVyYW50QWRkRm9ybS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50RGV0YWlsTW9kYWwvUmVzdGF1cmFudERldGFpbE1vZGFsLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRJdGVtL1Jlc3RhdXJhbnRJdGVtLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRUYWIvUmVzdGF1cmFudFRhYi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWJCdXR0b24vUmVzdGF1cmFudFRhYkJ1dHRvbi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWJIZWFkZXIvUmVzdGF1cmFudFRhYkhlYWRlci5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9TdGFySWNvbi9TdGFySWNvbi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3R5bGVzL2luZGV4LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdHlsZXMvcmVzZXQuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3R5bGVzL2luZGV4LmNzcz82MzQ5Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0eWxlcy9yZXNldC5jc3M/NGNmYiIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL0x1bmNoQXBwL0x1bmNoQXBwLmNzcz9lN2FjIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQmFzZUNvbXBvbmVudC9CYXNlQ29tcG9uZW50LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvTHVuY2hBcHAvTHVuY2hBcHAudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9HbG9iYWxOYXZpZ2F0aW9uQmFyL0dsb2JhbE5hdmlnYXRpb25CYXIuY3NzPzBlZmMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvYXNzZXRzL2ltYWdlcy9hZGQtYnV0dG9uLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlscy9kb20udHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29uc3RhbnRzL3NlbGVjdG9yLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbnN0YW50cy9ldmVudFR5cGUudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9HbG9iYWxOYXZpZ2F0aW9uQmFyL0dsb2JhbE5hdmlnYXRpb25CYXIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC5jc3M/ZjNiNCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdG9yYWdlcy9jb25zdGFudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdG9yYWdlcy9SZXN0YXVyYW50U3RvcmFnZS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb25zdGFudHMvcmVnZXhwLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3ZhbGlkYXRvci9yZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWxWYWxpZGF0b3IudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdmFsaWRhdG9yL3N0YXJ0VmFsaWRhdGlvbi50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb25zdGFudHMvbWVudUNhdGVnb3J5L21lbnVDYXRlZ29yeS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb25zdGFudHMvc29ydENhdGVnb3J5L3NvcnRDYXRlZ29yeS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRUYWIvUmVzdGF1cmFudFRhYi5jb25zdGFudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9kb21haW4vUmVzdGF1cmFudC9SZXN0YXVyYW50LnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50SXRlbS9SZXN0YXVyYW50SXRlbS5jc3M/MTcyOCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRJdGVtL1Jlc3RhdXJhbnRJdGVtLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvUmVzdGF1cmFudEFkZEZvcm0vUmVzdGF1cmFudEFkZEZvcm0uY3NzPzViNjYiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50QWRkRm9ybS9SZXN0YXVyYW50QWRkRm9ybS5jb25zdGFudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlscy90eXBlR3VhcmQudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50QWRkRm9ybS9SZXN0YXVyYW50QWRkRm9ybS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnREZXRhaWxNb2RhbC9SZXN0YXVyYW50RGV0YWlsTW9kYWwuY3NzPzI3YTAiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50RGV0YWlsTW9kYWwvUmVzdGF1cmFudERldGFpbE1vZGFsLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvUmVzdGF1cmFudERldGFpbE1vZGFsL1Jlc3RhdXJhbnREZXRhaWxNb2RhbENvbnRlbnQvUmVzdGF1cmFudERldGFpbE1vZGFsQ29udGVudC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRBZGRNb2RhbC9SZXN0YXVyYW50QWRkTW9kYWwudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWIuY3NzPzg3NjQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWIudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWJIZWFkZXIvUmVzdGF1cmFudFRhYkhlYWRlci5jc3M/MzY1ZSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRUYWIvUmVzdGF1cmFudFRhYkhlYWRlci9SZXN0YXVyYW50VGFiSGVhZGVyLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvUmVzdGF1cmFudFRhYi9SZXN0YXVyYW50VGFiQm9keS9SZXN0YXVyYW50VGFiQm9keS50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRUYWIvUmVzdGF1cmFudFRhYkJ1dHRvbi9SZXN0YXVyYW50VGFiQnV0dG9uLmNzcz82MDRhIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvUmVzdGF1cmFudFRhYi9SZXN0YXVyYW50VGFiQnV0dG9uL1Jlc3RhdXJhbnRUYWJCdXR0b24udHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvYXNzZXRzL2ltYWdlcy9jYXRlZ29yeS1rb3JlYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Fzc2V0cy9pbWFnZXMvY2F0ZWdvcnktYXNpYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Fzc2V0cy9pbWFnZXMvY2F0ZWdvcnktY2hpbmVzZS5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvYXNzZXRzL2ltYWdlcy9jYXRlZ29yeS1ldGMucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Fzc2V0cy9pbWFnZXMvY2F0ZWdvcnktamFwYW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2Fzc2V0cy9pbWFnZXMvY2F0ZWdvcnktd2VzdGVybi5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvYXNzZXRzL2ltYWdlcy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvYXNzZXRzL2ltYWdlcy9mYXZvcml0ZS1pY29uLWxpbmVkLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL0NhdGVnb3J5SWNvbi9DYXRlZ29yeUljb24udHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9sdW5jaC9TdGFySWNvbi9TdGFySWNvbi5jc3M/MGNkNCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1N0YXJJY29uL1N0YXJJY29uLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvbW1vbkRyb3Bkb3duL0NvbW1vbkRyb3Bkb3duLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3V0aWxzL2NyZWF0ZU9wdGlvbkVsZW1lbnRzLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvbW1vbk1vZGFsL0NvbW1vbk1vZGFsLmNzcz84MDI0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvbW1vbk1vZGFsL0NvbW1vbk1vZGFsLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvbW1vbkZvcm1JdGVtL0NvbW1vbkZvcm1JdGVtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1vZGFsLWJhY2tkcm9wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG5cXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4zNSk7XFxufVxcblxcbi5tb2RhbC1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgYm90dG9tOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtaGVpZ2h0OiA2MjBweDtcXG5cXG4gIHBhZGRpbmc6IDI0cHggMTZweDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcblxcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwcHggMHB4O1xcbiAgYmFja2dyb3VuZDogdmFyKC0tZ3JleS0xMDApO1xcblxcbiAgLyogRmlyZWZveCAmIElFICYgRWRnZSAqL1xcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lO1xcbn1cXG5cXG4vKiBDaHJvbWUsIFNhZmFyaSAqL1xcbi5tb2RhbC1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9Db21tb25Nb2RhbC9Db21tb25Nb2RhbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxlQUFlO0VBQ2YsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsT0FBTzs7RUFFUCwrQkFBK0I7QUFDakM7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsU0FBUztFQUNULFdBQVc7RUFDWCxpQkFBaUI7O0VBRWpCLGtCQUFrQjtFQUNsQixjQUFjOztFQUVkLDhCQUE4QjtFQUM5QiwyQkFBMkI7O0VBRTNCLHdCQUF3QjtFQUN4QixxQkFBcUI7RUFDckIsd0JBQXdCO0FBQzFCOztBQUVBLG1CQUFtQjtBQUNuQjtFQUNFLGFBQWE7QUFDZlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubW9kYWwtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcblxcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjM1KTtcXG59XFxuXFxuLm1vZGFsLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBib3R0b206IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC1oZWlnaHQ6IDYyMHB4O1xcblxcbiAgcGFkZGluZzogMjRweCAxNnB4O1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuXFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDBweCAwcHg7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1ncmV5LTEwMCk7XFxuXFxuICAvKiBGaXJlZm94ICYgSUUgJiBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XFxufVxcblxcbi8qIENocm9tZSwgU2FmYXJpICovXFxuLm1vZGFsLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmduYiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogNjRweDtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4uZ25iX190aXRsZSB7XFxuICBjb2xvcjogI2ZjZmNmZDtcXG59XFxuXFxuLmduYl9fYnV0dG9uIHtcXG4gIGhlaWdodDogNDBweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZ25iX19idXR0b24gaW1nIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBvYmplY3QtZml0OiBjb250YWluO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9HbG9iYWxOYXZpZ2F0aW9uQmFyL0dsb2JhbE5hdmlnYXRpb25CYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsWUFBWTs7RUFFWixlQUFlOztFQUVmLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxZQUFZOztFQUVaLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0VBQ2YsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZ25iIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgaGVpZ2h0OiA2NHB4O1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5nbmJfX3RpdGxlIHtcXG4gIGNvbG9yOiAjZmNmY2ZkO1xcbn1cXG5cXG4uZ25iX19idXR0b24ge1xcbiAgaGVpZ2h0OiA0MHB4O1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDI0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5nbmJfX2J1dHRvbiBpbWcge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tb2RhbC10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAyNHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9MdW5jaEFwcC9MdW5jaEFwcC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDI0cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5mb3JtLWl0ZW0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICBtYXJnaW4tYm90dG9tOiAyNHB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIGxhYmVsIHtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTQwMCk7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0tLXJlcXVpcmVkIGxhYmVsOjphZnRlciB7XFxuICBwYWRkaW5nLWxlZnQ6IDRweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG4gIGNvbnRlbnQ6IFxcXCIqXFxcIjtcXG59XFxuXFxuLmZvcm0taXRlbSAuaGVscC10ZXh0IHtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5mb3JtLWl0ZW0gaW5wdXQsXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSxcXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDZweCAwO1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIHRleHRhcmVhIHtcXG4gIHJlc2l6ZTogbm9uZTtcXG59XFxuXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG5pbnB1dFtuYW1lPVxcXCJuYW1lXFxcIl0sXFxuaW5wdXRbbmFtZT1cXFwibGlua1xcXCJdIHtcXG4gIGhlaWdodDogNDRweDtcXG59XFxuXFxuLmJ1dHRvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi5idXR0b24tLXNlY29uZGFyeSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5idXR0b24tLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50QWRkRm9ybS9SZXN0YXVyYW50QWRkRm9ybS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlCQUFpQjs7RUFFakIsMkJBQTJCO0VBQzNCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTs7O0VBR0UsWUFBWTtFQUNaLGFBQWE7O0VBRWIsaUNBQWlDO0VBQ2pDLGtCQUFrQjs7RUFFbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZOztFQUVaLFlBQVk7O0VBRVosaUNBQWlDO0VBQ2pDLGtCQUFrQjs7RUFFbEIsc0JBQXNCO0FBQ3hCOztBQUVBOztFQUVFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZOztFQUVaLGtCQUFrQjs7RUFFbEIsWUFBWTtFQUNaLGtCQUFrQjs7RUFFbEIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUNBQWlDO0VBQ2pDLHVCQUF1Qjs7RUFFdkIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0NBQWdDOztFQUVoQyxzQkFBc0I7QUFDeEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmZvcm0taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDI0cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcblxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29udGVudDogXFxcIipcXFwiO1xcbn1cXG5cXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmZvcm0taXRlbSBpbnB1dCxcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIHBhZGRpbmc6IDhweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbmlucHV0W25hbWU9XFxcIm5hbWVcXFwiXSxcXG5pbnB1dFtuYW1lPVxcXCJsaW5rXFxcIl0ge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbn1cXG5cXG4uYnV0dG9uLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmJ1dHRvbjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuXFxuLmJ1dHRvbi0tc2Vjb25kYXJ5IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMzAwKTtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmJ1dHRvbi0tcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTEwMCk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNyZXN0YXVyYW50LWRldGFpbC11cmwge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IHZhcigtLWdyZXktNTAwKTtcXG4gIG1hcmdpbi1ib3R0b206IDMycHg7XFxuICBtYXJnaW4tdG9wOiAxNnB4O1xcbn1cXG5cXG4jcmVzdGF1cmFudC1kZXRhaWwtZGlzdGFuY2Uge1xcbiAgbWFyZ2luOiAxNnB4IDBweDtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtZGV0YWlsLWNhdGVnb3J5IHtcXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XFxufVxcblxcbiNyZXN0YXVyYW50LWRldGFpbC1oZWFkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuYTpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50RGV0YWlsTW9kYWwvUmVzdGF1cmFudERldGFpbE1vZGFsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0UsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNyZXN0YXVyYW50LWRldGFpbC11cmwge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IHZhcigtLWdyZXktNTAwKTtcXG4gIG1hcmdpbi1ib3R0b206IDMycHg7XFxuICBtYXJnaW4tdG9wOiAxNnB4O1xcbn1cXG5cXG4jcmVzdGF1cmFudC1kZXRhaWwtZGlzdGFuY2Uge1xcbiAgbWFyZ2luOiAxNnB4IDBweDtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuI3Jlc3RhdXJhbnQtZGV0YWlsLWNhdGVnb3J5IHtcXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XFxufVxcblxcbiNyZXN0YXVyYW50LWRldGFpbC1oZWFkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuYTpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXG4gIHdpZHRoOiAxMDAlO1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19jYXRlZ29yeSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDY0cHg7XFxuICBoZWlnaHQ6IDY0cHg7XFxuICBtaW4td2lkdGg6IDY0cHg7XFxuICBtaW4taGVpZ2h0OiA2NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbGlnaHRlbi1jb2xvcik7XFxufVxcblxcbi5jYXRlZ29yeS1pY29uIHtcXG4gIHdpZHRoOiAzNnB4O1xcbiAgaGVpZ2h0OiAzNnB4O1xcbn1cXG5cXG4jcmVzdGF1cmFudC1pbmZvLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5yZXN0YXVyYW50X19pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fbmFtZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5yZXN0YXVyYW50X19kaXN0YW5jZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG5cXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxuXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuXFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50SXRlbS9SZXN0YXVyYW50SXRlbS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCOztFQUV2QixpQkFBaUI7RUFDakIsV0FBVzs7RUFFWCxnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixnQkFBZ0I7O0VBRWhCLGtCQUFrQjs7RUFFbEIsa0JBQWtCO0VBQ2xCLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0Usb0JBQW9COztFQUVwQixnQkFBZ0I7O0VBRWhCLGdCQUFnQjtFQUNoQix1QkFBdUI7RUFDdkIscUJBQXFCOztFQUVyQixxQkFBcUI7RUFDckIsNEJBQTRCO0FBQzlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG5cXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZWFlZDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2NhdGVnb3J5IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNjRweDtcXG4gIGhlaWdodDogNjRweDtcXG4gIG1pbi13aWR0aDogNjRweDtcXG4gIG1pbi1oZWlnaHQ6IDY0cHg7XFxuXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1saWdodGVuLWNvbG9yKTtcXG59XFxuXFxuLmNhdGVnb3J5LWljb24ge1xcbiAgd2lkdGg6IDM2cHg7XFxuICBoZWlnaHQ6IDM2cHg7XFxufVxcblxcbiNyZXN0YXVyYW50LWluZm8tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19uYW1lIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rpc3RhbmNlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcblxcbiAgcGFkZGluZy10b3A6IDhweDtcXG5cXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcXG5cXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZXN0YXVyYW50LWxpc3QtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luOiAxNnB4IDA7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLGVBQWU7RUFDZixjQUFjO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50LWxpc3QtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luOiAxNnB4IDA7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5vcGVuIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAgMTZweDtcXG59XFxuXFxuLm9wZW4gc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5jbG9zZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixXQUFXO0VBQ1gsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixnQkFBZ0I7O0VBRWhCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5vcGVuIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAgMTZweDtcXG59XFxuXFxuLm9wZW4gc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5jbG9zZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC10YWItaGVhZGVyLWJ1dHRvbiB7XFxuICBoZWlnaHQ6IDM1cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmbGV4OiAxO1xcbiAgcGFkZGluZy1ib3R0b206IDhweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLnJlc3RhdXJhbnQtdGFiLWhlYWRlci10ZXh0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDAuNXB4O1xcbn1cXG5cXG4udGFiLWFjdGl2ZSB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi50YWItaW5hY3RpdmUge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG59XFxuXFxuLnRhYi10ZXh0LWFjdGl2ZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi50YWItdGV4dC1pbmFjdGl2ZSB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50VGFiL1Jlc3RhdXJhbnRUYWJCdXR0b24vUmVzdGF1cmFudFRhYkJ1dHRvbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLE9BQU87RUFDUCxtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLGVBQWU7RUFDZixxQkFBcUI7RUFDckIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7RUFDWCxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osNkNBQTZDO0FBQy9DOztBQUVBO0VBQ0UsWUFBWTtFQUNaLHdDQUF3QztBQUMxQzs7QUFFQTtFQUNFLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC10YWItaGVhZGVyLWJ1dHRvbiB7XFxuICBoZWlnaHQ6IDM1cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmbGV4OiAxO1xcbiAgcGFkZGluZy1ib3R0b206IDhweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLnJlc3RhdXJhbnQtdGFiLWhlYWRlci10ZXh0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDAuNXB4O1xcbn1cXG5cXG4udGFiLWFjdGl2ZSB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi50YWItaW5hY3RpdmUge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG59XFxuXFxuLnRhYi10ZXh0LWFjdGl2ZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi50YWItdGV4dC1pbmFjdGl2ZSB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjcmVzdGF1cmFudC10YWItaGVhZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDM1cHg7XFxuICBtYXJnaW46IDMycHggMTZweDtcXG59XFxuXFxucmVzdGF1cmFudC10YWItYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvUmVzdGF1cmFudFRhYi9SZXN0YXVyYW50VGFiSGVhZGVyL1Jlc3RhdXJhbnRUYWJIZWFkZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLFlBQVk7RUFDWixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNyZXN0YXVyYW50LXRhYi1oZWFkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMzVweDtcXG4gIG1hcmdpbjogMzJweCAxNnB4O1xcbn1cXG5cXG5yZXN0YXVyYW50LXRhYi1idXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjc3Rhci1pY29uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvbHVuY2gvU3Rhckljb24vU3Rhckljb24uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsZUFBZTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjc3Rhci1pY29uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogQ29sb3JzICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbjpyb290IHtcXG4gIC0tcHJpbWFyeS1jb2xvcjogI2VjNGEwYTtcXG4gIC0tbGlnaHRlbi1jb2xvcjogI2Y2YTg4YTtcXG4gIC0tZ3JleS0xMDA6ICNmZmZmZmY7XFxuICAtLWdyZXktMjAwOiAjZDBkNWRkO1xcbiAgLS1ncmV5LTMwMDogIzY2NzA4NTtcXG4gIC0tZ3JleS00MDA6ICMzNDQwNTQ7XFxuICAtLWdyZXktNTAwOiAjMDAwMDAwO1xcbn1cXG5cXG4vKiBUeXBvZ3JhcGh5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnRleHQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4udGV4dC1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsbURBQW1EO0FBQ25EO0VBQ0Usd0JBQXdCO0VBQ3hCLHdCQUF3QjtFQUN4QixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBLG1EQUFtRDtBQUNuRDtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIENvbG9ycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG46cm9vdCB7XFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXG59XFxuXFxuLyogVHlwb2dyYXBoeSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi50ZXh0LXRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLnRleHQtc3VidGl0bGUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1ib2R5IHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLnRleHQtY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9yZXNldC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxVQUFVO0VBQ1YsU0FBUztFQUNULHNCQUFzQjtBQUN4Qjs7QUFFQTs7RUFFRSxnQkFBZ0I7QUFDbEI7O0FBRUE7O0VBRUUsdUJBQXVCO0VBQ3ZCLGVBQWU7QUFDakJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxudWwsXFxubGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0x1bmNoQXBwLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTHVuY2hBcHAuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY2xhc3MgQmFzZUNvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5zZXRFdmVudCgpO1xuICAgIH1cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudCgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7IH1cbiAgICBzZXRFdmVudCgpIHsgfVxuICAgIHJlbW92ZUV2ZW50KCkgeyB9XG4gICAgZ2V0VGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBlbWl0KGV2ZW50VHlwZSwgZGV0YWlsKSB7XG4gICAgICAgIGNvbnN0IGN1c3RvbUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50VHlwZSwge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjdXN0b21FdmVudCk7XG4gICAgfVxuICAgIG9uKHsgdGFyZ2V0LCBldmVudE5hbWUsIGV2ZW50SGFuZGxlciB9KSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgICB9XG4gICAgb2ZmKHsgdGFyZ2V0LCBldmVudE5hbWUsIGV2ZW50SGFuZGxlciB9KSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCYXNlQ29tcG9uZW50O1xuIiwiaW1wb3J0IFwiLi9MdW5jaEFwcC5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmNsYXNzIEx1bmNoQXBwIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgIDxnbG9iYWwtbmF2aWdhdGlvbi1iYXI+PC9nbG9iYWwtbmF2aWdhdGlvbi1iYXI+XG4gICAgICA8bWFpbj5cbiAgICAgICAgPHJlc3RhdXJhbnQtdGFiIGNsYXNzPSdyZXN0YXVyYW50LWZpbHRlci1jb250YWluZXInPjwvcmVzdGF1cmFudC10YWI+XG4gICAgICA8L21haW4+XG4gICAgICA8cmVzdGF1cmFudC1hZGQtbW9kYWw+PC9yZXN0YXVyYW50LWFkZC1tb2RhbD5cbiAgICAgIDxyZXN0YXVyYW50LWRldGFpbC1tb2RhbD48L3Jlc3RhdXJhbnQtZGV0YWlsLW1vZGFsPlxuICAgIGA7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwibHVuY2gtYXBwXCIsIEx1bmNoQXBwKTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9HbG9iYWxOYXZpZ2F0aW9uQmFyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR2xvYmFsTmF2aWdhdGlvbkJhci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWRkLWJ1dHRvbi5wbmdcIjsiLCJleHBvcnQgY29uc3QgJCA9IChzZWxlY3RvciwgdGFyZ2V0ID0gZG9jdW1lbnQpID0+IHRhcmdldC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbmV4cG9ydCBjb25zdCAkJCA9IChzZWxlY3RvciwgdGFyZ2V0ID0gZG9jdW1lbnQpID0+IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiIsImV4cG9ydCBjb25zdCBFTEVNRU5UX1NFTEVDVE9SID0ge1xuICAgIGNhdGVnb3J5RmlsdGVyOiBcIiNjYXRlZ29yeS1maWx0ZXJcIixcbiAgICBnbmJCdXR0b246IFwiI2duYi1idXR0b25cIixcbiAgICByZXN0YXVyYW50QWRkTW9kYWw6IFwiI3Jlc3RhdXJhbnQtYWRkLW1vZGFsXCIsXG4gICAgcmVzdGF1cmFudERldGFpbE1vZGFsOiBcIiNyZXN0YXVyYW50LWRldGFpbC1tb2RhbFwiLFxuICAgIG1vZGFsQ2FuY2VsQnV0dG9uOiBcIiNtb2RhbC1jYW5jZWwtYnV0dG9uXCIsXG4gICAgbW9kYWxEZWxldGVCdXR0b246IFwiI21vZGFsLWRlbGV0ZS1idXR0b25cIixcbiAgICByZXN0YXVyYW50QWRkRm9ybTogXCIjcmVzdGF1cmFudC1hZGQtZm9ybVwiLFxuICAgIHNvcnRpbmdGaWx0ZXI6IFwiI3NvcnRpbmctZmlsdGVyXCIsXG4gICAgZGlzdGFuY2VTZWxlY3Q6IFwiI2Rpc3RhbmNlLXNlbGVjdD5zZWxlY3RcIixcbiAgICBjYXRlZ29yeVNlbGVjdDogXCIjY2F0ZWdvcnktc2VsZWN0PnNlbGVjdFwiLFxuICAgIG5hbWVJbnB1dDogXCIjbmFtZS1pbnB1dFwiLFxuICAgIHVybElucHV0OiBcIiN1cmwtaW5wdXRcIixcbn07XG4iLCJleHBvcnQgY29uc3QgQ1VTVE9NX0VWRU5UX1RZUEUgPSB7XG4gICAgc29ydENoYW5nZTogXCJzb3J0Q2hhbmdlXCIsXG4gICAgcmVyZW5kZXJSZXN0YXVyYW50TGlzdDogXCJyZXJlbmRlclJlc3RhdXJhbnRMaXN0XCIsXG4gICAgZmlsdGVyQ2F0ZWdvcnk6IFwiZmlsdGVyQ2F0ZWdvcnlcIixcbiAgICByZXNldEZvcm06IFwicmVzZXRGb3JtXCIsXG4gICAgcmVzdGF1cmFudERldGFpbE1vZGFsT3BlbjogXCJyZXN0YXVyYW50RGV0YWlsTW9kYWxPcGVuXCIsXG4gICAgcmVzdGF1cmFudERldGFpbE1vZGFsQ2xvc2U6IFwicmVzdGF1cmFudERldGFpbE1vZGFsQ2xvc2VcIixcbiAgICByZXN0YXVyYW50QWRkTW9kYWxPcGVuOiBcInJlc3RhdXJhbnRBZGRNb2RhbE9wZW5cIixcbiAgICByZXN0YXVyYW50QWRkTW9kYWxDbG9zZTogXCJyZXN0YXVyYW50QWRkTW9kYWxDbG9zZVwiLFxuICAgIHJlcmVuZGVyTW9kYWw6IFwicmVyZW5kZXJNb2RhbFwiLFxuICAgIGNoYW5nZVRhYjogXCJjaGFuZ2VUYWJcIixcbn07XG4iLCJpbXBvcnQgXCIuL0dsb2JhbE5hdmlnYXRpb25CYXIuY3NzXCI7XG5pbXBvcnQgYWRkQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2FkZC1idXR0b24ucG5nXCI7XG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vLi4vQmFzZUNvbXBvbmVudC9CYXNlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2RvbVwiO1xuaW1wb3J0IHsgRUxFTUVOVF9TRUxFQ1RPUiB9IGZyb20gXCIuLi8uLi8uLi9jb25zdGFudHMvc2VsZWN0b3JcIjtcbmltcG9ydCB7IENVU1RPTV9FVkVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy9ldmVudFR5cGVcIjtcbmNsYXNzIEdsb2JhbE5hdmlnYXRpb25CYXIgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIGduYkJ1dHRvbkNsaWNrOiB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiB0aGlzLmhhbmRsZU9wZW5Nb2RhbC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGhlYWRlciBjbGFzcz1cImduYlwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzPVwiZ25iX190aXRsZSB0ZXh0LXRpdGxlXCI+7KCQ7IusIOutkCDrqLnsp4A8L2gxPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImduYi1idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJnbmJfX2J1dHRvblwiIGFyaWEtbGFiZWw9XCLsnYzsi53soJAg7LaU6rCAXCI+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPSR7YWRkQnV0dG9ufSBhbHQ9XCLsnYzsi53soJAg7LaU6rCAXCI+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgIGA7XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICB0aGlzLm9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMuZ25iQnV0dG9uQ2xpY2ssXG4gICAgICAgICAgICB0YXJnZXQ6ICQoRUxFTUVOVF9TRUxFQ1RPUi5nbmJCdXR0b24pID8/IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGFuZGxlT3Blbk1vZGFsKCkge1xuICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudEFkZE1vZGFsT3Blbik7XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50KCkge1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLmduYkJ1dHRvbkNsaWNrLFxuICAgICAgICAgICAgdGFyZ2V0OiAkKEVMRU1FTlRfU0VMRUNUT1IuZ25iQnV0dG9uKSA/PyBkb2N1bWVudCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZ2xvYmFsLW5hdmlnYXRpb24tYmFyXCIsIEdsb2JhbE5hdmlnYXRpb25CYXIpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRMaXN0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudExpc3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGNvbnN0IFNUT1JBR0VfS0VZUyA9IHtcbiAgICByZXN0YXVyYW50RGV0YWlsOiBcInJlc3RhdXJhbnREZXRhaWxcIixcbn07XG4iLCJpbXBvcnQgeyBTVE9SQUdFX0tFWVMgfSBmcm9tIFwiLi9jb25zdGFudFwiO1xuY29uc3QgUmVzdGF1cmFudFN0b3JhZ2UgPSB7XG4gICAgZ2V0KCkge1xuICAgICAgICBjb25zdCByZXN0YXVyYW50RGV0YWlscyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy5yZXN0YXVyYW50RGV0YWlsKTtcbiAgICAgICAgaWYgKCFyZXN0YXVyYW50RGV0YWlscylcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzdGF1cmFudERldGFpbHMpO1xuICAgIH0sXG4gICAgc2V0KHJlc3RhdXJhbnREZXRhaWwpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdSZXN0YXVyYW50RGV0YWlscyA9IHRoaXMuZ2V0KCk7XG4gICAgICAgIGV4aXN0aW5nUmVzdGF1cmFudERldGFpbHMucHVzaChyZXN0YXVyYW50RGV0YWlsKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLnJlc3RhdXJhbnREZXRhaWwsIEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nUmVzdGF1cmFudERldGFpbHMpKTtcbiAgICB9LFxuICAgIHVwZGF0ZShyZXN0YXVyYW50RGV0YWlscykge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWVMucmVzdGF1cmFudERldGFpbCwgSlNPTi5zdHJpbmdpZnkocmVzdGF1cmFudERldGFpbHMpKTtcbiAgICB9LFxuICAgIHJlbW92ZShyZXN0YXVyYW50TmFtZSkge1xuICAgICAgICBjb25zdCBleGlzdGluZ1Jlc3RhdXJhbnREZXRhaWxzID0gdGhpcy5nZXQoKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRSZXN0YXVyYW50c0RldGFpbHMgPSBleGlzdGluZ1Jlc3RhdXJhbnREZXRhaWxzLmZpbHRlcigoeyBuYW1lIH0pID0+IG5hbWUgIT09IHJlc3RhdXJhbnROYW1lKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkFHRV9LRVlTLnJlc3RhdXJhbnREZXRhaWwsIEpTT04uc3RyaW5naWZ5KGZpbHRlcmVkUmVzdGF1cmFudHNEZXRhaWxzKSk7XG4gICAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50U3RvcmFnZTtcbiIsImV4cG9ydCBjb25zdCBPUFRJT05fRUxFTUVOVF9SRUdFWFAgPSAvPG9wdGlvbiB2YWx1ZT0oXFxkKyk+KFxcZCspPFxcL29wdGlvbj4vZztcbmV4cG9ydCBjb25zdCBVUkxfUkVHRVhQID0gL14oKGh0dHB8aHR0cHMpOlxcL1xcLy4pWy1hLXpBLVowLTlAOiUuX1xcK34jPV17MiwyNTZ9XFwuW2Etel17Miw2fVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKSQvO1xuIiwiaW1wb3J0IHsgc3RhcnRWYWxpZGF0aW9uIH0gZnJvbSBcIi4uL3N0YXJ0VmFsaWRhdGlvblwiO1xuaW1wb3J0IHsgVVJMX1JFR0VYUCB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMvcmVnZXhwXCI7XG5jb25zdCBSZXN0YXVyYW50RGV0YWlsVmFsaWRhdG9yID0ge1xuICAgIHZhbGlkYXRpb25UeXBlczoge1xuICAgICAgICBlbXB0eUNhdGVnb3J5OiB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwi7J6F66Cl7ZWcIOy5tO2FjOqzoOumrOqwgCDsobTsnqztlZjsp4Ag7JWK7Iq164uI64ukLiDri6Tsi5wg7J6F66Cl7ZW0IOyjvOyEuOyalC5cIixcbiAgICAgICAgICAgIGlzVmFsaWQoeyB1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsIH0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcklucHV0UmVzdGF1cmFudERldGFpbC5jYXRlZ29yeSAhPT0gXCJcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGVtcHR5UmVzdGF1cmFudE5hbWU6IHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCLsnoXroKXtlZwg7J2M7Iud7KCQIOydtOumhOydtCDsobTsnqztlZjsp4Ag7JWK7Iq164uI64ukLiDri6Tsi5wg7J6F66Cl7ZW0IOyjvOyEuOyalC5cIixcbiAgICAgICAgICAgIGlzVmFsaWQoeyB1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsIH0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcklucHV0UmVzdGF1cmFudERldGFpbC5uYW1lICE9PSBcIlwiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZW1wdHlEaXN0YW5jZToge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBcIuyeheugpe2VnCDqsbDrpqzqsIAg7KG07J6s7ZWY7KeAIOyViuyKteuLiOuLpC4g64uk7IucIOyeheugpe2VtCDso7zshLjsmpQuXCIsXG4gICAgICAgICAgICBpc1ZhbGlkKHsgdXNlcklucHV0UmVzdGF1cmFudERldGFpbCB9KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJJbnB1dFJlc3RhdXJhbnREZXRhaWwuZGlzdGFuY2UgIT09IFwiXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBkdXBsaWNhdGVOYW1lczoge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBcIuykkeuzteuQnCDsnYzsi53soJAg7J2066aE7J20IOyhtOyerO2VqeuLiOuLpC4g64uk7IucIOyeheugpe2VtOyjvOyEuOyalC5cIixcbiAgICAgICAgICAgIGlzVmFsaWQoeyB1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsLCByZXN0YXVyYW50RGV0YWlscywgfSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN0YXVyYW50RGV0YWlscy5ldmVyeSgocmVzdGF1cmFudERldGFpbCkgPT4gcmVzdGF1cmFudERldGFpbC5uYW1lICE9PSB1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZFVybEZvcm1hdDoge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBcIuycoO2aqO2VmOyngCDslYrsnYAg7J2066mU7J28IO2YleyLnSDsnoXri4jri6QuIOuLpOyLnCDsnoXroKXtlbTso7zshLjsmpQuXCIsXG4gICAgICAgICAgICBpc1ZhbGlkKHsgdXNlcklucHV0UmVzdGF1cmFudERldGFpbCB9KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsLnVybCA9PT0gXCJcIiB8fFxuICAgICAgICAgICAgICAgICAgICBVUkxfUkVHRVhQLnRlc3QodXNlcklucHV0UmVzdGF1cmFudERldGFpbD8udXJsID8/IFwiXCIpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBjaGVjayh1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsLCByZXN0YXVyYW50RGV0YWlscykge1xuICAgICAgICBzdGFydFZhbGlkYXRpb24odGhpcy52YWxpZGF0aW9uVHlwZXMsIHtcbiAgICAgICAgICAgIHVzZXJJbnB1dFJlc3RhdXJhbnREZXRhaWwsXG4gICAgICAgICAgICByZXN0YXVyYW50RGV0YWlscyxcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50RGV0YWlsVmFsaWRhdG9yO1xuIiwiZXhwb3J0IGNvbnN0IHN0YXJ0VmFsaWRhdGlvbiA9ICh2YWxpZGF0aW9uVHlwZXMsIHZhbHVlKSA9PiB7XG4gICAgT2JqZWN0LnZhbHVlcyh2YWxpZGF0aW9uVHlwZXMpLmZvckVhY2goKHsgZXJyb3JNZXNzYWdlLCBpc1ZhbGlkIH0pID0+IHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkKHZhbHVlKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBNRU5VX0NBVEVHT1JJRVMgPSB7XG4gICAgYWxsOiBcIuyghOyytFwiLFxuICAgIGtvcmVhbjogXCLtlZzsi51cIixcbiAgICBjaGluZXNlOiBcIuykkeyLnVwiLFxuICAgIGphcGFuZXNlOiBcIuydvOyLnVwiLFxuICAgIHdlc3Rlcm46IFwi7JaR7IudXCIsXG4gICAgYXNpYW46IFwi7JWE7Iuc7JWIXCIsXG4gICAgb3RoZXJzOiBcIuq4sO2DgFwiLFxufTtcbiIsImV4cG9ydCBjb25zdCBTT1JUX0NBVEVHT1JJRVNfVFlQRSA9IHtcbiAgICBuYW1lOiBcIuydtOumhOyInFwiLFxuICAgIGRpc3RhbmNlOiBcIuqxsOumrOyInFwiLFxufTtcbiIsImV4cG9ydCBjb25zdCBSRVNUQVVSQU5UX1RBQl9TVEFUVVNfVEFCTEUgPSB7XG4gICAgYWxsOiBcImFsbFwiLFxuICAgIGZhdm9yaXRlOiBcImZhdm9yaXRlXCIsXG59O1xuIiwiaW1wb3J0IFJlc3RhdXJhbnRTdG9yYWdlIGZyb20gXCIuLi8uLi9zdG9yYWdlcy9SZXN0YXVyYW50U3RvcmFnZVwiO1xuaW1wb3J0IFJlc3RhdXJhbnREZXRhaWxWYWxpZGF0b3IgZnJvbSBcIi4uLy4uL3ZhbGlkYXRvci9yZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWxWYWxpZGF0b3JcIjtcbmltcG9ydCB7IE1FTlVfQ0FURUdPUklFUyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMvbWVudUNhdGVnb3J5L21lbnVDYXRlZ29yeVwiO1xuaW1wb3J0IHsgU09SVF9DQVRFR09SSUVTX1RZUEUgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3NvcnRDYXRlZ29yeS9zb3J0Q2F0ZWdvcnlcIjtcbmltcG9ydCB7IFJFU1RBVVJBTlRfVEFCX1NUQVRVU19UQUJMRSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2x1bmNoL1Jlc3RhdXJhbnRUYWIvUmVzdGF1cmFudFRhYi5jb25zdGFudFwiO1xuY2xhc3MgUmVzdGF1cmFudCB7XG4gICAgY29uc3RydWN0b3Ioc3RvcmFnZSA9IFJlc3RhdXJhbnRTdG9yYWdlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENhdGVnb3J5ID0gTUVOVV9DQVRFR09SSUVTLmFsbDtcbiAgICAgICAgdGhpcy5zb3J0VHlwZSA9IFNPUlRfQ0FURUdPUklFU19UWVBFLm5hbWU7XG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgICAgIHRoaXMucmVzdGF1cmFudHNEZXRhaWxzID0gdGhpcy5nZXRTb3J0ZWRSZXN0YXVyYW50cyh0aGlzLmN1cnJlbnRDYXRlZ29yeSwgdGhpcy5zb3J0VHlwZSk7XG4gICAgfVxuICAgIGdldFNvcnRlZFJlc3RhdXJhbnRzKGNhdGVnb3J5LCBzb3J0VHlwZSwgdGFiU3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IGlzRmF2b3JpdGVTZWxlY3RlZCA9IHRhYlN0YXR1cyA9PT0gUkVTVEFVUkFOVF9UQUJfU1RBVFVTX1RBQkxFLmZhdm9yaXRlO1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlXG4gICAgICAgICAgICAuZ2V0KClcbiAgICAgICAgICAgIC5maWx0ZXIoKHJlc3RhdXJhbnREZXRhaWwpID0+ICFpc0Zhdm9yaXRlU2VsZWN0ZWQgfHwgcmVzdGF1cmFudERldGFpbC5pc0Zhdm9yaXRlKVxuICAgICAgICAgICAgLmZpbHRlcigocmVzdGF1cmFudERldGFpbCkgPT4gY2F0ZWdvcnkgPT09IE1FTlVfQ0FURUdPUklFUy5hbGwgfHxcbiAgICAgICAgICAgIHJlc3RhdXJhbnREZXRhaWwuY2F0ZWdvcnkgPT09IGNhdGVnb3J5KVxuICAgICAgICAgICAgLnNvcnQoc29ydFR5cGUgPT09IFNPUlRfQ0FURUdPUklFU19UWVBFLm5hbWVcbiAgICAgICAgICAgID8gKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSlcbiAgICAgICAgICAgIDogKGEsIGIpID0+IE51bWJlcihhLmRpc3RhbmNlKSAtIE51bWJlcihiLmRpc3RhbmNlKSk7XG4gICAgfVxuICAgIGdldFJlc3RhdXJhbnREZXRhaWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0YXVyYW50c0RldGFpbHM7XG4gICAgfVxuICAgIHVwZGF0ZVJlc3RhdXJhbnRzKHNvcnRUeXBlLCB0YWJTdGF0dXMpIHtcbiAgICAgICAgdGhpcy5yZXN0YXVyYW50c0RldGFpbHMgPSB0aGlzLmdldFNvcnRlZFJlc3RhdXJhbnRzKHRoaXMuY3VycmVudENhdGVnb3J5LCBzb3J0VHlwZSwgdGFiU3RhdHVzKTtcbiAgICB9XG4gICAgYWRkUmVzdGF1cmFudChyZXN0YXVyYW50RGV0YWlsKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXQocmVzdGF1cmFudERldGFpbCk7XG4gICAgICAgIHRoaXMudXBkYXRlUmVzdGF1cmFudHModGhpcy5zb3J0VHlwZSk7XG4gICAgfVxuICAgIHNvcnRSZXN0YXVyYW50cyhzb3J0VHlwZSkge1xuICAgICAgICB0aGlzLnNvcnRUeXBlID0gc29ydFR5cGU7XG4gICAgICAgIHRoaXMudXBkYXRlUmVzdGF1cmFudHMoc29ydFR5cGUpO1xuICAgIH1cbiAgICBmaWx0ZXJSZXN0YXVyYW50cyhmaWx0ZXJUeXBlLCBzb3J0VHlwZSA9IFNPUlRfQ0FURUdPUklFU19UWVBFLm5hbWUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q2F0ZWdvcnkgPSBmaWx0ZXJUeXBlO1xuICAgICAgICB0aGlzLnVwZGF0ZVJlc3RhdXJhbnRzKHNvcnRUeXBlKTtcbiAgICB9XG4gICAgdmFsaWRhdGVSZXN0YXVyYW50RGV0YWlsKHVzZXJJbnB1dFJlc3RhdXJhbnREZXRhaWwpIHtcbiAgICAgICAgUmVzdGF1cmFudERldGFpbFZhbGlkYXRvci5jaGVjayh1c2VySW5wdXRSZXN0YXVyYW50RGV0YWlsLCB0aGlzLnJlc3RhdXJhbnRzRGV0YWlscyk7XG4gICAgfVxuICAgIGdldFJlc3RhdXJhbnREZXRhaWxCeU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlXG4gICAgICAgICAgICAuZ2V0KClcbiAgICAgICAgICAgIC5maW5kKChyZXN0YXVyYW50RGV0YWlsKSA9PiByZXN0YXVyYW50RGV0YWlsLm5hbWUgPT09IG5hbWUpO1xuICAgIH1cbiAgICB1cGRhdGVSZXN0YXVyYW50RGV0YWlsSW5Jc0Zhdm9yaXRlKG5hbWUpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzdGF1cmFudERldGFpbCA9IHRoaXMuc3RvcmFnZVxuICAgICAgICAgICAgLmdldCgpXG4gICAgICAgICAgICAubWFwKChyZXN0YXVyYW50c0RldGFpbCkgPT4gcmVzdGF1cmFudHNEZXRhaWwubmFtZSA9PT0gbmFtZVxuICAgICAgICAgICAgPyB7IC4uLnJlc3RhdXJhbnRzRGV0YWlsLCBpc0Zhdm9yaXRlOiAhcmVzdGF1cmFudHNEZXRhaWwuaXNGYXZvcml0ZSB9XG4gICAgICAgICAgICA6IHsgLi4ucmVzdGF1cmFudHNEZXRhaWwgfSk7XG4gICAgICAgIHRoaXMuc3RvcmFnZS51cGRhdGUodXBkYXRlUmVzdGF1cmFudERldGFpbCk7XG4gICAgfVxuICAgIHJlbW92ZVJlc3RhdXJhbnREZXRhaWwodGFyZ2V0TmFtZSkge1xuICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlKHRhcmdldE5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnQ7XG4iLCJpbXBvcnQgXCIuL1Jlc3RhdXJhbnRMaXN0LmNzc1wiO1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL0Jhc2VDb21wb25lbnQvQmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IFJlc3RhdXJhbnQgZnJvbSBcIi4uLy4uLy4uL2RvbWFpbi9SZXN0YXVyYW50L1Jlc3RhdXJhbnRcIjtcbmltcG9ydCB7IENVU1RPTV9FVkVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy9ldmVudFR5cGVcIjtcbmltcG9ydCB7IFNPUlRfQ0FURUdPUklFU19UWVBFIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy9zb3J0Q2F0ZWdvcnkvc29ydENhdGVnb3J5XCI7XG5pbXBvcnQgUmVzdGF1cmFudFN0b3JhZ2UgZnJvbSBcIi4uLy4uLy4uL3N0b3JhZ2VzL1Jlc3RhdXJhbnRTdG9yYWdlXCI7XG5jbGFzcyBSZXN0YXVyYW50TGlzdCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlc3RhdXJhbnQgPSBuZXcgUmVzdGF1cmFudChSZXN0YXVyYW50U3RvcmFnZSk7XG4gICAgICAgIHRoaXMuc29ydFR5cGUgPSBTT1JUX0NBVEVHT1JJRVNfVFlQRS5uYW1lO1xuICAgICAgICB0aGlzLnRhYlN0YXR1cyA9IHRoaXMuZ2V0QXR0cmlidXRlKFwic3RhdHVzXCIpO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgcmVyZW5kZXJSZXN0YXVyYW50TGlzdDoge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogQ1VTVE9NX0VWRU5UX1RZUEUucmVyZW5kZXJSZXN0YXVyYW50TGlzdCxcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuaGFuZGxlUmVyZW5kZXJSZXN0YXVyYW50TGlzdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvcnRDaGFuZ2U6IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IENVU1RPTV9FVkVOVF9UWVBFLnNvcnRDaGFuZ2UsXG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiB0aGlzLmhhbmRsZVNvcnRSZXN0YXVyYW50SXRlbXMuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXJDYXRlZ29yeToge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogQ1VTVE9NX0VWRU5UX1RZUEUuZmlsdGVyQ2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiB0aGlzLmhhbmRsZUZpbHRlclJlc3RhdXJhbnRJdGVtcy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgIDxzZWN0aW9uIGNsYXNzPVwicmVzdGF1cmFudC1saXN0LWNvbnRhaW5lclwiPlxuICAgICAgICA8dWwgY2xhc3M9XCJyZXN0YXVyYW50LWxpc3RcIj5cbiAgICAgICAgICAke3RoaXMuY3JlYXRlUmVzdGF1cmFudEl0ZW1zKCl9XG4gICAgICAgIDwvdWw+IFxuICAgICAgPC9zZWN0aW9uPlxuICAgIGA7XG4gICAgfVxuICAgIGNyZWF0ZVJlc3RhdXJhbnRJdGVtcygpIHtcbiAgICAgICAgdGhpcy5yZXN0YXVyYW50LnVwZGF0ZVJlc3RhdXJhbnRzKHRoaXMuc29ydFR5cGUsIHRoaXMudGFiU3RhdHVzKTtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudERldGFpbHMgPSB0aGlzLnJlc3RhdXJhbnQuZ2V0UmVzdGF1cmFudERldGFpbHMoKTtcbiAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnREZXRhaWxzLnJlZHVjZSgoYWNjLCB7IG5hbWUsIGNhdGVnb3J5LCBkaXN0YW5jZSwgZGVzY3JpcHRpb24sIGlzRmF2b3JpdGUgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChhY2MgK1xuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICA8cmVzdGF1cmFudC1pdGVtIFxuICAgICAgICAgICAgICBuYW1lPVwiJHtuYW1lfVwiXG4gICAgICAgICAgICAgIGNhdGVnb3J5PVwiJHtjYXRlZ29yeX1cIlxuICAgICAgICAgICAgICBkaXN0YW5jZT1cIiR7ZGlzdGFuY2V9XCJcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCIke2Rlc2NyaXB0aW9ufVwiXG4gICAgICAgICAgICAgIGlzRmF2b3JpdGU9XCIke2lzRmF2b3JpdGV9XCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJyZXN0YXVyYW50XCJcbiAgICAgICAgICAgID48L3Jlc3RhdXJhbnQtaXRlbT5cbiAgICAgICAgICA8L2xpPmApO1xuICAgICAgICB9LCBcIlwiKTtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgIHRoaXMub24oe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXJlbmRlclJlc3RhdXJhbnRMaXN0LFxuICAgICAgICAgICAgdGFyZ2V0OiBkb2N1bWVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oeyAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLnNvcnRDaGFuZ2UsIHRhcmdldDogZG9jdW1lbnQgfSk7XG4gICAgICAgIHRoaXMub24oeyAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLmZpbHRlckNhdGVnb3J5LCB0YXJnZXQ6IGRvY3VtZW50IH0pO1xuICAgIH1cbiAgICBoYW5kbGVSZXJlbmRlclJlc3RhdXJhbnRMaXN0KCkge1xuICAgICAgICB0aGlzLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuICAgIGhhbmRsZVNvcnRSZXN0YXVyYW50SXRlbXMoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvcnRUeXBlID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICAgICAgdGhpcy5zb3J0VHlwZSA9IHNvcnRUeXBlO1xuICAgICAgICAgICAgdGhpcy5yZXN0YXVyYW50LnNvcnRSZXN0YXVyYW50cyhzb3J0VHlwZSk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRmlsdGVyUmVzdGF1cmFudEl0ZW1zKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJUeXBlID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICAgICAgdGhpcy5yZXN0YXVyYW50LmZpbHRlclJlc3RhdXJhbnRzKGZpbHRlclR5cGUsIHRoaXMuc29ydFR5cGUpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50KCkge1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLnJlcmVuZGVyUmVzdGF1cmFudExpc3QsXG4gICAgICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vZmYoeyAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLnNvcnRDaGFuZ2UsIHRhcmdldDogZG9jdW1lbnQgfSk7XG4gICAgICAgIHRoaXMub2ZmKHsgLi4udGhpcy5ldmVudExpc3RlbmVycy5maWx0ZXJDYXRlZ29yeSwgdGFyZ2V0OiBkb2N1bWVudCB9KTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWxpc3RcIiwgUmVzdGF1cmFudExpc3QpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRJdGVtLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudEl0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9SZXN0YXVyYW50SXRlbS5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7ICQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvZG9tXCI7XG5pbXBvcnQgUmVzdGF1cmFudCBmcm9tIFwiLi4vLi4vLi4vZG9tYWluL1Jlc3RhdXJhbnQvUmVzdGF1cmFudFwiO1xuaW1wb3J0IHsgQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50VHlwZVwiO1xuY2xhc3MgUmVzdGF1cmFudEl0ZW0gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIGxpc3RJdGVtQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuaGFuZGxlQ2xpY2tJdGVtLmJpbmQodGhpcyksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJjYXRlZ29yeVwiKSA/PyBcIlwiO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID8/IFwiXCI7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJkaXN0YW5jZVwiKSA/PyBcIlwiO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiZGVzY3JpcHRpb25cIikgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgaXNGYXZvcml0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiaXNGYXZvcml0ZVwiKSA/PyBcIlwiO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz0ncmVzdGF1cmFudF9fY2F0ZWdvcnknPlxuICAgICAgICAgIDxjYXRlZ29yeS1pY29uIGNsYXNzPSdjYXRlZ29yeS1pY29uJyBjYXRlZ29yeT0nJHtjYXRlZ29yeX0nPjwvY2F0ZWdvcnktaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9J3Jlc3RhdXJhbnQtaW5mby1jb250YWluZXInPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3Jlc3RhdXJhbnRfX2luZm8nPlxuICAgICAgICAgICAgPGgzIGNsYXNzPSdyZXN0YXVyYW50X19uYW1lIHRleHQtc3VidGl0bGUnPiR7bmFtZX08L2gzPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3Jlc3RhdXJhbnRfX2Rpc3RhbmNlIHRleHQtYm9keSc+7Lqg7Y287Iqk66Gc67aA7YSwICR7ZGlzdGFuY2V967aEIOuCtDwvc3Bhbj5cbiAgICAgICAgICAgIDxwIGNsYXNzPSdyZXN0YXVyYW50X19kZXNjcmlwdGlvbiB0ZXh0LWJvZHknPiR7ZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzdGFyLWljb24gbmFtZT0nJHtuYW1lfScgZmF2b3JpdGU9JyR7aXNGYXZvcml0ZX0nPjwvc3Rhci1pY29uPlxuICAgICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIH1cbiAgICBzZXRFdmVudCgpIHtcbiAgICAgICAgdGhpcy5vbih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLmxpc3RJdGVtQ2xpY2ssXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVDbGlja0l0ZW0oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdGF1cmFudE5hbWUgPSAkKFwiaDNcIiwgZXZlbnQuY3VycmVudFRhcmdldCk/LnRleHRDb250ZW50O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN0YXVyYW50TmFtZSAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCByZXN0YXVyYW50RGV0YWlsID0gbmV3IFJlc3RhdXJhbnQoKS5nZXRSZXN0YXVyYW50RGV0YWlsQnlOYW1lKHJlc3RhdXJhbnROYW1lKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChDVVNUT01fRVZFTlRfVFlQRS5yZXN0YXVyYW50RGV0YWlsTW9kYWxPcGVuLCByZXN0YXVyYW50RGV0YWlsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVFdmVudCgpIHtcbiAgICAgICAgdGhpcy5vZmYoe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5saXN0SXRlbUNsaWNrLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWl0ZW1cIiwgUmVzdGF1cmFudEl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudEl0ZW07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudEFkZEZvcm0uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50QWRkRm9ybS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVzdGF1cmFudERldGFpbFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vdmFsaWRhdG9yL3Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbFZhbGlkYXRvclwiO1xuaW1wb3J0IHsgRUxFTUVOVF9TRUxFQ1RPUiB9IGZyb20gXCIuLi8uLi8uLi9jb25zdGFudHMvc2VsZWN0b3JcIjtcbmNvbnN0IHsgZW1wdHlDYXRlZ29yeSwgZW1wdHlSZXN0YXVyYW50TmFtZSwgZW1wdHlEaXN0YW5jZSwgZHVwbGljYXRlTmFtZXMsIGludmFsaWRVcmxGb3JtYXQsIH0gPSBSZXN0YXVyYW50RGV0YWlsVmFsaWRhdG9yLnZhbGlkYXRpb25UeXBlcztcbmV4cG9ydCBjb25zdCBFUlJPUl9UQVJHRVRfRUxFTUVOVFNfRElDVElPTkFSWSA9IHtcbiAgICBbZW1wdHlDYXRlZ29yeS5lcnJvck1lc3NhZ2VdOiBFTEVNRU5UX1NFTEVDVE9SLmNhdGVnb3J5U2VsZWN0LFxuICAgIFtlbXB0eVJlc3RhdXJhbnROYW1lLmVycm9yTWVzc2FnZV06IEVMRU1FTlRfU0VMRUNUT1IubmFtZUlucHV0LFxuICAgIFtlbXB0eURpc3RhbmNlLmVycm9yTWVzc2FnZV06IEVMRU1FTlRfU0VMRUNUT1IuZGlzdGFuY2VTZWxlY3QsXG4gICAgW2R1cGxpY2F0ZU5hbWVzLmVycm9yTWVzc2FnZV06IEVMRU1FTlRfU0VMRUNUT1IubmFtZUlucHV0LFxuICAgIFtpbnZhbGlkVXJsRm9ybWF0LmVycm9yTWVzc2FnZV06IEVMRU1FTlRfU0VMRUNUT1IudXJsSW5wdXQsXG59O1xuIiwiaW1wb3J0IHsgRVJST1JfVEFSR0VUX0VMRU1FTlRTX0RJQ1RJT05BUlkgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9sdW5jaC9SZXN0YXVyYW50QWRkRm9ybS9SZXN0YXVyYW50QWRkRm9ybS5jb25zdGFudFwiO1xuaW1wb3J0IHsgQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2V2ZW50VHlwZVwiO1xuaW1wb3J0IHsgTUVOVV9DQVRFR09SSUVTIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9tZW51Q2F0ZWdvcnkvbWVudUNhdGVnb3J5XCI7XG5leHBvcnQgY29uc3QgaXNDdXN0b21FdmVudFR5cGUgPSAoZXZlbnRUeXBlKSA9PiB7XG4gICAgcmV0dXJuIGV2ZW50VHlwZSBpbiBDVVNUT01fRVZFTlRfVFlQRTtcbn07XG5leHBvcnQgY29uc3QgaXNVc2VySW5wdXRWYWx1ZXMgPSAodXNlcklucHV0VmFsdWVzKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHVzZXJJbnB1dFZhbHVlcykuZXZlcnkoKGtleSkgPT4gW1wiY2F0ZWdvcnlcIiwgXCJuYW1lXCIsIFwiZGlzdGFuY2VcIiwgXCJkZXNjcmlwdGlvblwiLCBcInVybFwiXS5pbmNsdWRlcyhrZXkpKTtcbn07XG5leHBvcnQgY29uc3QgaXNWYWxpZEVycm9yTWVzc2FnZUtleSA9IChlcnJvck1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gZXJyb3JNZXNzYWdlIGluIEVSUk9SX1RBUkdFVF9FTEVNRU5UU19ESUNUSU9OQVJZO1xufTtcbmV4cG9ydCBjb25zdCBpc01lbnVDYXRlZ29yeVdpdGhvdXRBbGwgPSAodGFyZ2V0TWVudUNhdGVnb3J5KSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoTUVOVV9DQVRFR09SSUVTKS5zb21lKChtZW51Q2F0ZWdvcnkpID0+IHRhcmdldE1lbnVDYXRlZ29yeSAhPT0gTUVOVV9DQVRFR09SSUVTLmFsbCAmJlxuICAgICAgICBtZW51Q2F0ZWdvcnkgPT09IHRhcmdldE1lbnVDYXRlZ29yeSk7XG59O1xuIiwiaW1wb3J0IFwiLi9SZXN0YXVyYW50QWRkRm9ybS5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7IEVSUk9SX1RBUkdFVF9FTEVNRU5UU19ESUNUSU9OQVJZIH0gZnJvbSBcIi4vUmVzdGF1cmFudEFkZEZvcm0uY29uc3RhbnRcIjtcbmltcG9ydCBSZXN0YXVyYW50IGZyb20gXCIuLi8uLi8uLi9kb21haW4vUmVzdGF1cmFudC9SZXN0YXVyYW50XCI7XG5pbXBvcnQgeyBDVVNUT01fRVZFTlRfVFlQRSB9IGZyb20gXCIuLi8uLi8uLi9jb25zdGFudHMvZXZlbnRUeXBlXCI7XG5pbXBvcnQgeyBNRU5VX0NBVEVHT1JJRVMgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL21lbnVDYXRlZ29yeS9tZW51Q2F0ZWdvcnlcIjtcbmltcG9ydCB7IEVMRU1FTlRfU0VMRUNUT1IgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL3NlbGVjdG9yXCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2RvbVwiO1xuaW1wb3J0IHsgaXNVc2VySW5wdXRWYWx1ZXMsIGlzVmFsaWRFcnJvck1lc3NhZ2VLZXksIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3R5cGVHdWFyZFwiO1xuY2xhc3MgUmVzdGF1cmFudEFkZEZvcm0gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIHJlc2V0Rm9ybToge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogQ1VTVE9NX0VWRU5UX1RZUEUucmVzZXRGb3JtLFxuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5oYW5kbGVSZXNldEZvcm0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0YXVyYW50QWRkRm9ybVN1Ym1pdDoge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogXCJzdWJtaXRcIixcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuaGFuZGxlU3VibWl0QWRkUmVzdGF1cmFudC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuaGFuZGxlQ2FuY2VsQnV0dG9uLmJpbmQodGhpcyksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IG1lbnVDYXRlZ29yeVdpdGhvdXRBbGxPcHRpb25zID0gT2JqZWN0LnZhbHVlcyhNRU5VX0NBVEVHT1JJRVMpLnNsaWNlKDEpO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgICAgPGZvcm0gaWQ9XCJyZXN0YXVyYW50LWFkZC1mb3JtXCI+XG4gICAgICAgICAgICA8Y29tbW9uLWZvcm0taXRlbVxuICAgICAgICAgICAgICBmb3I9J2NhdGVnb3J5J1xuICAgICAgICAgICAgICBjbGFzc0xpc3Q9J2Zvcm0taXRlbS0tcmVxdWlyZWQnXG4gICAgICAgICAgICAgIGxhYmVsVGV4dD0n7Lm07YWM6rOg66asJ1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Y29tbW9uLWRyb3Bkb3duIG5hbWU9J2NhdGVnb3J5JyBpZD0nY2F0ZWdvcnktc2VsZWN0JyBvcHRpb25zPScke21lbnVDYXRlZ29yeVdpdGhvdXRBbGxPcHRpb25zfScgdGl0bGU9J+yEoO2Dne2VtCDso7zshLjsmpQnPjwvY29tbW9uLWRyb3Bkb3duPlxuICAgICAgICAgICAgPC9jb21tb24tZm9ybS1pdGVtPlxuICAgICAgICAgICAgPGNvbW1vbi1mb3JtLWl0ZW1cbiAgICAgICAgICAgICAgZm9yPSduYW1lJ1xuICAgICAgICAgICAgICBjbGFzc0xpc3Q9J2Zvcm0taXRlbS0tcmVxdWlyZWQnXG4gICAgICAgICAgICAgIGxhYmVsVGV4dD0n7J2066aEJ1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0nbmFtZScgaWQ9J25hbWUtaW5wdXQnIHJlcXVpcmVkPlxuICAgICAgICAgICAgPC9jb21tb24tZm9ybS1pdGVtPlxuICAgICAgICAgICAgPGNvbW1vbi1mb3JtLWl0ZW1cbiAgICAgICAgICAgICAgZm9yPVwiZGlzdGFuY2VcIlxuICAgICAgICAgICAgICBjbGFzc0xpc3Q9XCJmb3JtLWl0ZW0tLXJlcXVpcmVkXCJcbiAgICAgICAgICAgICAgbGFiZWxUZXh0PVwi6rGw66asKOuPhOuztCDsnbTrj5kg7Iuc6rCEKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxjb21tb24tZHJvcGRvd24gbmFtZT0nZGlzdGFuY2UnIGFkZE9wdGlvblRleHQ9J+u2hCDrgrQnIGlkPSdkaXN0YW5jZS1zZWxlY3QnIG9wdGlvbnM9JyR7UmVzdGF1cmFudEFkZEZvcm0uRElTVEFOQ0VTX09QVElPTlN9JyB0aXRsZT0n7ISg7YOd7ZW0IOyjvOyEuOyalCcgLz48L2NvbW1vbi1kcm9wZG93bj5cbiAgICAgICAgICAgIDwvY29tbW9uLWZvcm0taXRlbT5cbiAgICAgICAgICAgIDxjb21tb24tZm9ybS1pdGVtXG4gICAgICAgICAgICAgIGZvcj1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgbGFiZWxUZXh0PVwi7ISk66qFXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9J2Rlc2NyaXB0aW9uJyBpZD0nZGVzY3JpcHRpb24tdGV4dGFyZWEnIGNvbHM9JzMwJyByb3dzPSc1Jz48L3RleHRhcmVhPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0naGVscC10ZXh0IHRleHQtY2FwdGlvbic+66mU64m0IOuTsSDstpTqsIAg7KCV67O066W8IOyeheugpe2VtCDso7zshLjsmpQuPC9zcGFuPlxuICAgICAgICAgICAgPC9jb21tb24tZm9ybS1pdGVtPlxuICAgICAgICAgICAgPGNvbW1vbi1mb3JtLWl0ZW1cbiAgICAgICAgICAgICAgZm9yPVwidXJsXCJcbiAgICAgICAgICAgICAgbGFiZWxUZXh0PVwi7LC46rOgIOunge2BrFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBuYW1lPSd1cmwnIGlkPSd1cmwtaW5wdXQnLz5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2hlbHAtdGV4dCB0ZXh0LWNhcHRpb24nPuunpOyepSDsoJXrs7Trpbwg7ZmV7J247ZWgIOyImCDsnojripQg66eB7YGs66W8IOyeheugpe2VtCDso7zshLjsmpQuPC9zcGFuPlxuICAgICAgICAgICAgPC9jb21tb24tZm9ybS1pdGVtPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1vZGFsLWNhbmNlbC1idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidXR0b24gYnV0dG9uLS1zZWNvbmRhcnkgdGV4dC1jYXB0aW9uXCI+7Leo7IaM7ZWY6riwPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi0tcHJpbWFyeSB0ZXh0LWNhcHRpb25cIj7stpTqsIDtlZjquLA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgYDtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgIHRoaXMub24oe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXN0YXVyYW50QWRkRm9ybVN1Ym1pdCxcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMucmVzZXRGb3JtLFxuICAgICAgICAgICAgdGFyZ2V0OiAkKEVMRU1FTlRfU0VMRUNUT1IucmVzdGF1cmFudEFkZEZvcm0pID8/IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLm1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2ssXG4gICAgICAgICAgICB0YXJnZXQ6ICQoRUxFTUVOVF9TRUxFQ1RPUi5yZXN0YXVyYW50QWRkRm9ybSkgPz8gZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVSZXNldEZvcm0oKSB7XG4gICAgICAgIGNvbnN0IGZvcm1FbGVtZW50ID0gJChFTEVNRU5UX1NFTEVDVE9SLnJlc3RhdXJhbnRBZGRGb3JtKTtcbiAgICAgICAgaWYgKGZvcm1FbGVtZW50IGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSB7XG4gICAgICAgICAgICBmb3JtRWxlbWVudC5yZXNldCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZVN1Ym1pdEFkZFJlc3RhdXJhbnQoZXZlbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmFkZFVzZXJJbnB1dFJlc3RhdXJhbnREZXRhaWwoKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzZXRGb3JtKCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUucmVyZW5kZXJSZXN0YXVyYW50TGlzdCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudEFkZE1vZGFsQ2xvc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIGFsZXJ0KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRXJyb3JNZXNzYWdlS2V5KGVycm9yTWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gJChFUlJPUl9UQVJHRVRfRUxFTUVOVFNfRElDVElPTkFSWVtlcnJvck1lc3NhZ2VdKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkVXNlcklucHV0UmVzdGF1cmFudERldGFpbCgpIHtcbiAgICAgICAgY29uc3QgdXNlcklucHV0UmVzdGF1cmFudERldGFpbCA9IHRoaXMuY3JlYXRlRm9ybURhdGFUb1Jlc3RhdXJhbnREZXRhaWwoKTtcbiAgICAgICAgaWYgKHVzZXJJbnB1dFJlc3RhdXJhbnREZXRhaWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3RhdXJhbnQgPSBuZXcgUmVzdGF1cmFudCgpO1xuICAgICAgICAgICAgcmVzdGF1cmFudC52YWxpZGF0ZVJlc3RhdXJhbnREZXRhaWwodXNlcklucHV0UmVzdGF1cmFudERldGFpbCk7XG4gICAgICAgICAgICByZXN0YXVyYW50LmFkZFJlc3RhdXJhbnQodXNlcklucHV0UmVzdGF1cmFudERldGFpbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlRm9ybURhdGFUb1Jlc3RhdXJhbnREZXRhaWwoKSB7XG4gICAgICAgIGNvbnN0IGZvcm1FbGVtZW50ID0gJChFTEVNRU5UX1NFTEVDVE9SLnJlc3RhdXJhbnRBZGRGb3JtKTtcbiAgICAgICAgaWYgKGZvcm1FbGVtZW50IGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtRWxlbWVudCk7XG4gICAgICAgICAgICBjb25zdCB1c2VySW5wdXRWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIHVzZXJJbnB1dFZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNVc2VySW5wdXRWYWx1ZXModXNlcklucHV0VmFsdWVzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi51c2VySW5wdXRWYWx1ZXMsIGlzRmF2b3JpdGU6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi7J6Y66q7IOyeheugpe2VmOyFqOyKteuLiOuLpC4g64uk7IucIOyeheugpe2VtOyjvOyEuOyalC5cIik7XG4gICAgfVxuICAgIGhhbmRsZUNhbmNlbEJ1dHRvbihldmVudCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJlxuICAgICAgICAgICAgIXRhcmdldC5tYXRjaGVzKEVMRU1FTlRfU0VMRUNUT1IubW9kYWxDYW5jZWxCdXR0b24pKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmhhbmRsZVJlc2V0Rm9ybSgpO1xuICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudEFkZE1vZGFsQ2xvc2UpO1xuICAgIH1cbiAgICByZW1vdmVFdmVudCgpIHtcbiAgICAgICAgdGhpcy5vZmYoe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXN0YXVyYW50QWRkRm9ybVN1Ym1pdCxcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLnJlc2V0Rm9ybSxcbiAgICAgICAgICAgIHRhcmdldDogJChFTEVNRU5UX1NFTEVDVE9SLnJlc3RhdXJhbnRBZGRGb3JtKSA/PyBkb2N1bWVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub2ZmKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMubW9kYWxDYW5jZWxCdXR0b25DbGljayxcbiAgICAgICAgICAgIHRhcmdldDogJChFTEVNRU5UX1NFTEVDVE9SLnJlc3RhdXJhbnRBZGRGb3JtKSA/PyBkb2N1bWVudCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuUmVzdGF1cmFudEFkZEZvcm0uRElTVEFOQ0VTX09QVElPTlMgPSBbXCI1XCIsIFwiMTBcIiwgXCIxNVwiLCBcIjIwXCIsIFwiMzBcIl07XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWFkZC1mb3JtXCIsIFJlc3RhdXJhbnRBZGRGb3JtKTtcbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRBZGRGb3JtO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnREZXRhaWxNb2RhbC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnREZXRhaWxNb2RhbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuLi9SZXN0YXVyYW50RGV0YWlsTW9kYWwvUmVzdGF1cmFudERldGFpbE1vZGFsLmNzc1wiO1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL0Jhc2VDb21wb25lbnQvQmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50VHlwZVwiO1xuaW1wb3J0IHsgRUxFTUVOVF9TRUxFQ1RPUiB9IGZyb20gXCIuLi8uLi8uLi9jb25zdGFudHMvc2VsZWN0b3JcIjtcbmltcG9ydCB7ICQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvZG9tXCI7XG5jbGFzcyBSZXN0YXVyYW50RGV0YWlsTW9kYWwgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5yZXN0YXVyYW50RGV0YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIHJlc3RhdXJhbnREZXRhaWxNb2RhbE9wZW46IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IENVU1RPTV9FVkVOVF9UWVBFLnJlc3RhdXJhbnREZXRhaWxNb2RhbE9wZW4sXG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiB0aGlzLmhhbmRsZU9wZW5SZXN0YXVyYW50RGV0YWlsTW9kYWwuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0YXVyYW50RGV0YWlsTW9kYWxDbG9zZToge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogXCJjbGlja1wiLFxuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5oYW5kbGVDbG9zZVJlc3RhdXJhbnREZXRhaWxNb2RhbC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgIDxjb21tb24tbW9kYWxcbiAgICAgICAgb3Blbj1cIiR7Q1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudERldGFpbE1vZGFsT3Blbn1cIlxuICAgICAgICBjbG9zZT1cIiR7Q1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudERldGFpbE1vZGFsQ2xvc2V9XCJcbiAgICAgICAgdGFyZ2V0U2VsZWN0b3I9XCIke0VMRU1FTlRfU0VMRUNUT1IucmVzdGF1cmFudERldGFpbE1vZGFsfVwiICBcbiAgICAgICAgaWQ9XCJyZXN0YXVyYW50LWRldGFpbC1tb2RhbFwiXG4gICAgICA+XG4gICAgICAgICR7dGhpcy5yZXN0YXVyYW50RGV0YWlsXG4gICAgICAgICAgICA/IGA8cmVzdGF1cmFudC1kZXRhaWwtbW9kYWwtY29udGVudCBcbiAgICAgICAgICAgICAgICBuYW1lPScke3RoaXMucmVzdGF1cmFudERldGFpbC5uYW1lfSdcbiAgICAgICAgICAgICAgICBjYXRlZ29yeT0nJHt0aGlzLnJlc3RhdXJhbnREZXRhaWwuY2F0ZWdvcnl9J1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPScke3RoaXMucmVzdGF1cmFudERldGFpbC5kZXNjcmlwdGlvbn0nXG4gICAgICAgICAgICAgICAgZGlzdGFuY2U9JyR7dGhpcy5yZXN0YXVyYW50RGV0YWlsLmRpc3RhbmNlfSdcbiAgICAgICAgICAgICAgICBpc0Zhdm9yaXRlPScke3RoaXMucmVzdGF1cmFudERldGFpbC5pc0Zhdm9yaXRlfSdcbiAgICAgICAgICAgICAgICB1cmw9JyR7dGhpcy5yZXN0YXVyYW50RGV0YWlsLnVybH0nXG4gICAgICAgICAgICAgID48L3Jlc3RhdXJhbnQtZGV0YWlsLW1vZGFsLWNvbnRlbnQ+YFxuICAgICAgICAgICAgOiBcIlwifVxuICAgICAgPC9jb21tb24tbW9kYWw+XG4gICAgYDtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgIHRoaXMub24oe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXN0YXVyYW50RGV0YWlsTW9kYWxPcGVuLFxuICAgICAgICAgICAgdGFyZ2V0OiBkb2N1bWVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXN0YXVyYW50RGV0YWlsTW9kYWxDbG9zZSxcbiAgICAgICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZU9wZW5SZXN0YXVyYW50RGV0YWlsTW9kYWwoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdGF1cmFudERldGFpbCA9IGV2ZW50LmRldGFpbDtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVDbG9zZVJlc3RhdXJhbnREZXRhaWxNb2RhbChldmVudCkge1xuICAgICAgICBjb25zdCBtb2RhbENhbmNlbEJ1dHRvbkVsZW1lbnQgPSAkKEVMRU1FTlRfU0VMRUNUT1IubW9kYWxDYW5jZWxCdXR0b24sIHRoaXMpO1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBtb2RhbENhbmNlbEJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChDVVNUT01fRVZFTlRfVFlQRS5yZXN0YXVyYW50RGV0YWlsTW9kYWxDbG9zZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlRXZlbnQoKSB7XG4gICAgICAgIHRoaXMub2ZmKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMucmVzdGF1cmFudERldGFpbE1vZGFsT3BlbixcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLnJlc3RhdXJhbnREZXRhaWxNb2RhbENsb3NlLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWRldGFpbC1tb2RhbFwiLCBSZXN0YXVyYW50RGV0YWlsTW9kYWwpO1xuIiwiaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uLy4uL0Jhc2VDb21wb25lbnQvQmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IFJlc3RhdXJhbnQgZnJvbSBcIi4uLy4uLy4uLy4uL2RvbWFpbi9SZXN0YXVyYW50L1Jlc3RhdXJhbnRcIjtcbmltcG9ydCB7IENVU1RPTV9FVkVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnN0YW50cy9ldmVudFR5cGVcIjtcbmltcG9ydCB7IEVMRU1FTlRfU0VMRUNUT1IgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29uc3RhbnRzL3NlbGVjdG9yXCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2RvbVwiO1xuY2xhc3MgUmVzdGF1cmFudERldGFpbE1vZGFsQ29udGVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgZGVsZXRlUmVzdGF1cmFudEl0ZW06IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuaGFuZGxlRGVsZXRlUmVzdGF1cmFudEl0ZW0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXJlbmRlck1vZGFsOiB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBDVVNUT01fRVZFTlRfVFlQRS5yZXJlbmRlck1vZGFsLFxuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5oYW5kbGVSZXJlbmRlck1vZGFsQ29udGVudC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID8/IFwiXCI7XG4gICAgICAgIGNvbnN0IHJlc3RhdXJhbnREZXRhaWwgPSBuZXcgUmVzdGF1cmFudCgpLmdldFJlc3RhdXJhbnREZXRhaWxCeU5hbWUobmFtZSk7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBpZD0ncmVzdGF1cmFudC1kZXRhaWwtaGVhZGVyJz5cbiAgICAgICAgPGRpdiBpZD0ncmVzdGF1cmFudC1kZXRhaWwtY2F0ZWdvcnknIGNsYXNzPSdyZXN0YXVyYW50X19jYXRlZ29yeSc+XG4gICAgICAgICAgPGNhdGVnb3J5LWljb24gY2F0ZWdvcnk9JyR7cmVzdGF1cmFudERldGFpbD8uY2F0ZWdvcnl9Jz48L2NhdGVnb3J5LWljb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3Rhci1pY29uIG5hbWU9JyR7bmFtZX0nIGZhdm9yaXRlPScke3Jlc3RhdXJhbnREZXRhaWw/LmlzRmF2b3JpdGV9Jz48L3N0YXItaWNvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz0ncmVzdGF1cmFudF9faW5mbyc+XG4gICAgICAgIDxoMyBjbGFzcz0ncmVzdGF1cmFudF9fbmFtZSB0ZXh0LXN1YnRpdGxlJz4ke25hbWV9PC9oMz5cbiAgICAgICAgPHNwYW4gaWQ9J3Jlc3RhdXJhbnQtZGV0YWlsLWRpc3RhbmNlJyBjbGFzcz0ndGV4dC1ib2R5Jz7suqDtjbzsiqTroZzrtoDthLAgJHtyZXN0YXVyYW50RGV0YWlsPy5kaXN0YW5jZX3rtoQg64K0PC9zcGFuPlxuICAgICAgICA8cCBjbGFzcz0ncmVzdGF1cmFudF9fZGVzY3JpcHRpb24gdGV4dC1ib2R5Jz4ke3Jlc3RhdXJhbnREZXRhaWw/LmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9JyR7cmVzdGF1cmFudERldGFpbD8udXJsfScgaWQ9J3Jlc3RhdXJhbnQtZGV0YWlsLXVybCc+XG4gICAgICAgIDxkaXYgYm9yZGVyPScwJz4ke3Jlc3RhdXJhbnREZXRhaWw/LnVybH08L2Rpdj5cbiAgICAgIDwvYT5cbiAgICAgIDxkaXYgY2xhc3M9J2J1dHRvbi1jb250YWluZXInPlxuICAgICAgICA8YnV0dG9uIGlkPSdtb2RhbC1kZWxldGUtYnV0dG9uJyB0eXBlPSdidXR0b24nIGNsYXNzPSdidXR0b24gYnV0dG9uLS1zZWNvbmRhcnkgdGV4dC1jYXB0aW9uJz7sgq3soJztlZjquLA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBpZD0nbW9kYWwtY2FuY2VsLWJ1dHRvbicgdHlwZT0nYnV0dG9uJyBjbGFzcz0nYnV0dG9uIGJ1dHRvbi0tcHJpbWFyeSB0ZXh0LWNhcHRpb24nPuuLq+q4sDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgIHRoaXMub24oe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5kZWxldGVSZXN0YXVyYW50SXRlbSxcbiAgICAgICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXJlbmRlck1vZGFsLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGFuZGxlRGVsZXRlUmVzdGF1cmFudEl0ZW0oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgbW9kYWxEZWxldGVCdXR0b25FbGVtZW50ID0gJChFTEVNRU5UX1NFTEVDVE9SLm1vZGFsRGVsZXRlQnV0dG9uLCB0aGlzKTtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudE5hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPz8gXCJcIjtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbW9kYWxEZWxldGVCdXR0b25FbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCByZXN0YXVyYW50ID0gbmV3IFJlc3RhdXJhbnQoKTtcbiAgICAgICAgICAgIHJlc3RhdXJhbnQucmVtb3ZlUmVzdGF1cmFudERldGFpbChyZXN0YXVyYW50TmFtZSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUucmVyZW5kZXJSZXN0YXVyYW50TGlzdCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudERldGFpbE1vZGFsQ2xvc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZVJlcmVuZGVyTW9kYWxDb250ZW50KCkge1xuICAgICAgICB0aGlzLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50KCkge1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLmRlbGV0ZVJlc3RhdXJhbnRJdGVtLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vZmYoe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5yZXJlbmRlck1vZGFsLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWRldGFpbC1tb2RhbC1jb250ZW50XCIsIFJlc3RhdXJhbnREZXRhaWxNb2RhbENvbnRlbnQpO1xuIiwiaW1wb3J0IFwiLi4vUmVzdGF1cmFudERldGFpbE1vZGFsL1Jlc3RhdXJhbnREZXRhaWxNb2RhbC5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7IENVU1RPTV9FVkVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy9ldmVudFR5cGVcIjtcbmltcG9ydCB7IEVMRU1FTlRfU0VMRUNUT1IgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL3NlbGVjdG9yXCI7XG5jbGFzcyBSZXN0YXVyYW50QWRkTW9kYWwgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICA8Y29tbW9uLW1vZGFsXG4gICAgICAgICAgICBpZD1cInJlc3RhdXJhbnQtYWRkLW1vZGFsXCJcbiAgICAgICAgICAgIHRhcmdldFNlbGVjdG9yPVwiJHtFTEVNRU5UX1NFTEVDVE9SLnJlc3RhdXJhbnRBZGRNb2RhbH1cIiAgXG4gICAgICAgICAgICBvcGVuPVwiJHtDVVNUT01fRVZFTlRfVFlQRS5yZXN0YXVyYW50QWRkTW9kYWxPcGVufVwiXG4gICAgICAgICAgICBjbG9zZT1cIiR7Q1VTVE9NX0VWRU5UX1RZUEUucmVzdGF1cmFudEFkZE1vZGFsQ2xvc2V9XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGgyIGNsYXNzPSdtb2RhbC10aXRsZSB0ZXh0LXRpdGxlJz7sg4jroZzsmrQg7J2M7Iud7KCQPC9oMj5cbiAgICAgICAgICAgIDxyZXN0YXVyYW50LWFkZC1mb3JtPjwvcmVzdGF1cmFudC1hZGQtZm9ybT5cbiAgICAgICAgPC9jb21tb24tbW9kYWw+XG4gICAgYDtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LWFkZC1tb2RhbFwiLCBSZXN0YXVyYW50QWRkTW9kYWwpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRUYWIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50VGFiLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vUmVzdGF1cmFudFRhYi5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7IFJFU1RBVVJBTlRfVEFCX1NUQVRVU19UQUJMRSB9IGZyb20gXCIuL1Jlc3RhdXJhbnRUYWIuY29uc3RhbnRcIjtcbmltcG9ydCB7IENVU1RPTV9FVkVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50cy9ldmVudFR5cGVcIjtcbmNsYXNzIFJlc3RhdXJhbnRUYWIgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50YWJTdGF0dXMgPSBSRVNUQVVSQU5UX1RBQl9TVEFUVVNfVEFCTEUuYWxsO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgY2hhbmdlVGFiOiB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBDVVNUT01fRVZFTlRfVFlQRS5jaGFuZ2VUYWIsXG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiB0aGlzLmhhbmRsZUNoYW5nZVRhYlN0YXR1cy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgIDxyZXN0YXVyYW50LXRhYi1oZWFkZXJcbiAgICAgICAgc3RhdHVzPVwiJHt0aGlzLnRhYlN0YXR1c31cIlxuICAgICAgPjwvcmVzdGF1cmFudC10YWItaGVhZGVyPlxuICAgICAgPHJlc3RhdXJhbnQtdGFiLWJvZHlcbiAgICAgICAgc3RhdHVzPVwiJHt0aGlzLnRhYlN0YXR1c31cIlxuICAgICAgPjwvcmVzdGF1cmFudC10YWItYm9keT5cbiAgICBgO1xuICAgIH1cbiAgICBzZXRFdmVudCgpIHtcbiAgICAgICAgdGhpcy5vbih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLmNoYW5nZVRhYixcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2VUYWJTdGF0dXMoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMudGFiU3RhdHVzID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50KCkge1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLmNoYW5nZVRhYixcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInJlc3RhdXJhbnQtdGFiXCIsIFJlc3RhdXJhbnRUYWIpO1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudFRhYjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50VGFiSGVhZGVyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudFRhYkhlYWRlci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL1Jlc3RhdXJhbnRUYWJIZWFkZXIuY3NzXCI7XG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vQmFzZUNvbXBvbmVudC9CYXNlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBSRVNUQVVSQU5UX1RBQl9TVEFUVVNfVEFCTEUgfSBmcm9tIFwiLi4vUmVzdGF1cmFudFRhYi5jb25zdGFudFwiO1xuY2xhc3MgUmVzdGF1cmFudFRhYkhlYWRlciBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgdGFiU3RhdHVzID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJzdGF0dXNcIik7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICA8bmF2IGlkPSdyZXN0YXVyYW50LXRhYi1oZWFkZXInPlxuICAgICAgICAgICAgPHJlc3RhdXJhbnQtdGFiLWJ1dHRvblxuICAgICAgICAgICAgICBpc0FjdGl2ZVRhYj0nJHt0YWJTdGF0dXMgPT09IFJFU1RBVVJBTlRfVEFCX1NUQVRVU19UQUJMRS5hbGx9J1xuICAgICAgICAgICAgICBpZD0nJHtSRVNUQVVSQU5UX1RBQl9TVEFUVVNfVEFCTEUuYWxsfSdcbiAgICAgICAgICAgICAgdGV4dD0n66qo65OgIOydjOyLneygkCdcbiAgICAgICAgICAgID48L3Jlc3RhdXJhbnQtdGFiLWJ1dHRvbj5cbiAgICAgICAgICAgIDxyZXN0YXVyYW50LXRhYi1idXR0b25cbiAgICAgICAgICAgICAgaXNBY3RpdmVUYWI9JyR7dGFiU3RhdHVzID09PSBSRVNUQVVSQU5UX1RBQl9TVEFUVVNfVEFCTEUuZmF2b3JpdGV9J1xuICAgICAgICAgICAgICBpZD0nJHtSRVNUQVVSQU5UX1RBQl9TVEFUVVNfVEFCTEUuZmF2b3JpdGV9J1xuICAgICAgICAgICAgICB0ZXh0PSfsnpDso7wg6rCA64qUIOydjOyLneygkCdcbiAgICAgICAgICAgID48L3Jlc3RhdXJhbnQtdGFiLWJ1dHRvbj5cbiAgICAgICAgPC9uYXY+XG4gICAgYDtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LXRhYi1oZWFkZXJcIiwgUmVzdGF1cmFudFRhYkhlYWRlcik7XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50VGFiSGVhZGVyO1xuIiwiaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uLy4uL0Jhc2VDb21wb25lbnQvQmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50VHlwZVwiO1xuaW1wb3J0IHsgTUVOVV9DQVRFR09SSUVTIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnN0YW50cy9tZW51Q2F0ZWdvcnkvbWVudUNhdGVnb3J5XCI7XG5pbXBvcnQgeyBFTEVNRU5UX1NFTEVDVE9SIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnN0YW50cy9zZWxlY3RvclwiO1xuaW1wb3J0IHsgU09SVF9DQVRFR09SSUVTX1RZUEUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29uc3RhbnRzL3NvcnRDYXRlZ29yeS9zb3J0Q2F0ZWdvcnlcIjtcbmltcG9ydCB7IFJFU1RBVVJBTlRfVEFCX1NUQVRVU19UQUJMRSB9IGZyb20gXCIuLi9SZXN0YXVyYW50VGFiLmNvbnN0YW50XCI7XG5jbGFzcyBSZXN0YXVyYW50VGFiQm9keSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgdGFiU3RhdHVzID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJzdGF0dXNcIikgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgbWVudUNhdGVnb3J5T3B0aW9ucyA9IE9iamVjdC52YWx1ZXMoTUVOVV9DQVRFR09SSUVTKTtcbiAgICAgICAgY29uc3Qgc29ydENhdGVnb3J5T3B0aW9ucyA9IE9iamVjdC52YWx1ZXMoU09SVF9DQVRFR09SSUVTX1RZUEUpO1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgaWQ9J3Jlc3RhdXJhbnQtZHJvcGRvd24tY29udGFpbmVyJyBjbGFzcz0nJHt0YWJTdGF0dXMgPT09IFJFU1RBVVJBTlRfVEFCX1NUQVRVU19UQUJMRS5mYXZvcml0ZSA/IFwiY2xvc2VcIiA6IFwib3BlblwifSc+XG4gICAgICAgIDxjb21tb24tZHJvcGRvd24gXG4gICAgICAgICAgaWQ9J2NhdGVnb3J5LWZpbHRlcicgXG4gICAgICAgICAgY2xhc3NMaXN0PSdyZXN0YXVyYW50LWZpbHRlcicgXG4gICAgICAgICAgZXZlbnRUeXBlPScke0NVU1RPTV9FVkVOVF9UWVBFLmZpbHRlckNhdGVnb3J5fScgXG4gICAgICAgICAgdGFyZ2V0PScke0VMRU1FTlRfU0VMRUNUT1IuY2F0ZWdvcnlGaWx0ZXJ9JyBcbiAgICAgICAgICBvcHRpb25zPScke21lbnVDYXRlZ29yeU9wdGlvbnN9JyBcbiAgICAgICAgPlxuICAgICAgICA8L2NvbW1vbi1kcm9wZG93bj4gICAgICAgICAgICBcbiAgICAgICAgPGNvbW1vbi1kcm9wZG93biBcbiAgICAgICAgICBpZD0nc29ydGluZy1maWx0ZXInIFxuICAgICAgICAgIGNsYXNzTGlzdD0ncmVzdGF1cmFudC1maWx0ZXInIFxuICAgICAgICAgIGV2ZW50VHlwZT0nJHtDVVNUT01fRVZFTlRfVFlQRS5zb3J0Q2hhbmdlfScgXG4gICAgICAgICAgdGFyZ2V0PScke0VMRU1FTlRfU0VMRUNUT1Iuc29ydGluZ0ZpbHRlcn0nIFxuICAgICAgICAgIG9wdGlvbnM9JyR7c29ydENhdGVnb3J5T3B0aW9uc30nXG4gICAgICAgID5cbiAgICAgICAgPC9jb21tb24tZHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxyZXN0YXVyYW50LWxpc3RcbiAgICAgICAgc3RhdHVzPScke3RhYlN0YXR1c30nXG4gICAgICA+PC9yZXN0YXVyYW50LWxpc3Q+XG4gICAgYDtcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJyZXN0YXVyYW50LXRhYi1ib2R5XCIsIFJlc3RhdXJhbnRUYWJCb2R5KTtcbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRUYWJCb2R5O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRUYWJCdXR0b24uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50VGFiQnV0dG9uLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vUmVzdGF1cmFudFRhYkJ1dHRvbi5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7ICQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvZG9tXCI7XG5pbXBvcnQgeyBDVVNUT01fRVZFTlRfVFlQRSB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb25zdGFudHMvZXZlbnRUeXBlXCI7XG5jbGFzcyBSZXN0YXVyYW50VGFiQnV0dG9uIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSB7XG4gICAgICAgICAgICBidXR0b25DbGljazoge1xuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogXCJjbGlja1wiLFxuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBpc0FjdGl2ZVRhYiA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiaXNBY3RpdmVUYWJcIik7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgY29uc3QgYnV0dG9uVGV4dCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGV4dFwiKTtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXG4gICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgaWQ9JyR7aWR9JyBjbGFzcz0nJHtpc0FjdGl2ZVRhYiA9PT0gXCJ0cnVlXCIgPyBcInRhYi1hY3RpdmVcIiA6IFwidGFiLWluYWN0aXZlXCJ9IHJlc3RhdXJhbnQtdGFiLWhlYWRlci1idXR0b24nPlxuICAgICAgICA8c3BhbiBjbGFzcz0nJHtpc0FjdGl2ZVRhYiA9PT0gXCJ0cnVlXCIgPyBcInRhYi10ZXh0LWFjdGl2ZVwiIDogXCJ0YWItdGV4dC1pbmFjdGl2ZVwifSByZXN0YXVyYW50LXRhYi1oZWFkZXItdGV4dCc+JHtidXR0b25UZXh0fTwvc3Bhbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIGA7XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICB0aGlzLm9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMuYnV0dG9uQ2xpY2ssXG4gICAgICAgICAgICB0YXJnZXQ6ICQoXCJidXR0b25cIiwgdGhpcyksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVDbGljayhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoQ1VTVE9NX0VWRU5UX1RZUEUuY2hhbmdlVGFiLCBldmVudC5jdXJyZW50VGFyZ2V0LmlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVFdmVudCgpIHtcbiAgICAgICAgdGhpcy5vZmYoe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5idXR0b25DbGljayxcbiAgICAgICAgICAgIHRhcmdldDogJChcImJ1dHRvblwiLCB0aGlzKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwicmVzdGF1cmFudC10YWItYnV0dG9uXCIsIFJlc3RhdXJhbnRUYWJCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudFRhYkJ1dHRvbjtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1rb3JlYW4ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWFzaWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1jaGluZXNlLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1ldGMucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWphcGFuZXNlLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS13ZXN0ZXJuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZvcml0ZS1pY29uLWZpbGxlZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2b3JpdGUtaWNvbi1saW5lZC5wbmdcIjsiLCJpbXBvcnQgeyBjYXRlZ29yeUFzaWFuLCBjYXRlZ29yeUNoaW5lc2UsIGNhdGVnb3J5RXRjLCBjYXRlZ29yeUphcGFuZXNlLCBjYXRlZ29yeUtvcmVhbiwgY2F0ZWdvcnlXZXN0ZXJuLCB9IGZyb20gXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzXCI7XG5pbXBvcnQgeyBpc01lbnVDYXRlZ29yeVdpdGhvdXRBbGwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdHlwZUd1YXJkXCI7XG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vLi4vQmFzZUNvbXBvbmVudC9CYXNlQ29tcG9uZW50XCI7XG5jbGFzcyBDYXRlZ29yeUljb24gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jYXRlZ29yeUltYWdlID0ge1xuICAgICAgICAgICAg7JWE7Iuc7JWIOiBjYXRlZ29yeUFzaWFuLFxuICAgICAgICAgICAg7JaR7IudOiBjYXRlZ29yeVdlc3Rlcm4sXG4gICAgICAgICAgICDsnbzsi506IGNhdGVnb3J5SmFwYW5lc2UsXG4gICAgICAgICAgICDspJHsi506IGNhdGVnb3J5Q2hpbmVzZSxcbiAgICAgICAgICAgIO2VnOyLnTogY2F0ZWdvcnlLb3JlYW4sXG4gICAgICAgICAgICDquLDtg4A6IGNhdGVnb3J5RXRjLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJjYXRlZ29yeVwiKSA/PyBcIlwiO1xuICAgICAgICBpZiAoIWlzTWVudUNhdGVnb3J5V2l0aG91dEFsbChjYXRlZ29yeSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICA8aW1nIHNyYz0ke3RoaXMuY29udmVydENhdGVnb3J5VG9JbWFnZShjYXRlZ29yeSl9IGFsdD0ke2NhdGVnb3J5fT5cbiAgICAgIGA7XG4gICAgfVxuICAgIGNvbnZlcnRDYXRlZ29yeVRvSW1hZ2UoY2F0ZWdvcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0ZWdvcnlJbWFnZVtjYXRlZ29yeV07XG4gICAgfVxufVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiY2F0ZWdvcnktaWNvblwiLCBDYXRlZ29yeUljb24pO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0YXJJY29uLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3Rhckljb24uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi4vU3Rhckljb24vU3Rhckljb24uY3NzXCI7XG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vLi4vQmFzZUNvbXBvbmVudC9CYXNlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBmYXZvcml0ZVN0YXIsIG5vbkZhdm9yaXRlU3RhciB9IGZyb20gXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzXCI7XG5pbXBvcnQgeyBDVVNUT01fRVZFTlRfVFlQRSB9IGZyb20gXCIuLi8uLi8uLi9jb25zdGFudHMvZXZlbnRUeXBlXCI7XG5pbXBvcnQgUmVzdGF1cmFudCBmcm9tIFwiLi4vLi4vLi4vZG9tYWluL1Jlc3RhdXJhbnQvUmVzdGF1cmFudFwiO1xuY2xhc3MgU3Rhckljb24gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIHN0YXJJY29uQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6IFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuaGFuZGxlQ2xpY2tTdGFySWNvbi5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBpc0Zhdm9yaXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJmYXZvcml0ZVwiKSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGltZyBpZD0nc3Rhci1pY29uJyBzcmM9JyR7aXNGYXZvcml0ZSA/IGZhdm9yaXRlU3RhciA6IG5vbkZhdm9yaXRlU3Rhcn0nIGFsdD0nJHtpc0Zhdm9yaXRlID8gXCJmYXZvcml0ZVN0YXJcIiA6IFwibm9uRmF2b3JpdGVTdGFyXCJ9JyAvPmA7XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICB0aGlzLm9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMuc3Rhckljb25DbGljayxcbiAgICAgICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZUNsaWNrU3Rhckljb24oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiB0YXJnZXRFbGVtZW50Lm1hdGNoZXMoXCJpbWdcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3RhdXJhbnROYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID8/IFwiXCI7XG4gICAgICAgICAgICBuZXcgUmVzdGF1cmFudCgpLnVwZGF0ZVJlc3RhdXJhbnREZXRhaWxJbklzRmF2b3JpdGUocmVzdGF1cmFudE5hbWUpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KENVU1RPTV9FVkVOVF9UWVBFLnJlcmVuZGVyUmVzdGF1cmFudExpc3QpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KENVU1RPTV9FVkVOVF9UWVBFLnJlcmVuZGVyTW9kYWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUV2ZW50KCkge1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICAuLi50aGlzLmV2ZW50TGlzdGVuZXJzLnN0YXJJY29uQ2xpY2ssXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInN0YXItaWNvblwiLCBTdGFySWNvbik7XG4iLCJpbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vLi4vQmFzZUNvbXBvbmVudC9CYXNlQ29tcG9uZW50XCI7XG5pbXBvcnQgeyAkIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2RvbVwiO1xuaW1wb3J0IHsgY3JlYXRlT3B0aW9uRWxlbWVudHMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvY3JlYXRlT3B0aW9uRWxlbWVudHNcIjtcbmltcG9ydCB7IGlzQ3VzdG9tRXZlbnRUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3R5cGVHdWFyZFwiO1xuaW1wb3J0IHsgQ1VTVE9NX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50VHlwZVwiO1xuY2xhc3MgQ29tbW9uRHJvcGRvd24gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIGRyb3BEb3duOiB7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lOiBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldEF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICBjb25zdCBjbGFzc0xpc3QgPSB0aGlzLmdldEF0dHJpYnV0ZShcImNsYXNzTGlzdFwiKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0QXR0cmlidXRlKFwib3B0aW9uc1wiKT8uc3BsaXQoXCIsXCIpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGl0bGVcIik7XG4gICAgICAgIGNvbnN0IGFkZE9wdGlvblRleHQgPSB0aGlzLmdldEF0dHJpYnV0ZShcImFkZE9wdGlvblRleHRcIik7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICA8c2VsZWN0IG5hbWU9XCIke25hbWUgPz8gXCJcIn1cIiBpZD1cIiR7aWR9XCIgY2xhc3M9XCIke2NsYXNzTGlzdH1cIj5cbiAgICAgICAgICAgICR7dGl0bGUgPyBgPG9wdGlvbiB2YWx1ZT1cIlwiPiR7dGl0bGV9PC9vcHRpb24+YCA6IFwiXCJ9XG5cbiAgICAgICAgICAgICR7Y3JlYXRlT3B0aW9uRWxlbWVudHMob3B0aW9ucyA/PyBbXSwgYWRkT3B0aW9uVGV4dFxuICAgICAgICAgICAgPyAodmFsdWUpID0+IGAke3ZhbHVlfSR7YWRkT3B0aW9uVGV4dH1gXG4gICAgICAgICAgICA6ICh2YWx1ZSkgPT4gdmFsdWUpfVxuICAgICAgICA8L3NlbGVjdD5cbiAgICBgO1xuICAgIH1cbiAgICBzZXRFdmVudCgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIik7XG4gICAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLm9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuZXZlbnRMaXN0ZW5lcnMuZHJvcERvd24sXG4gICAgICAgICAgICB0YXJnZXQ6ICQodGFyZ2V0ID8/IFwiXCIpID8/IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGV2ZW50VHlwZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiZXZlbnRUeXBlXCIpO1xuICAgICAgICBpZiAoIWV2ZW50VHlwZSB8fCAhaXNDdXN0b21FdmVudFR5cGUoZXZlbnRUeXBlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGV2ZW50Py50YXJnZXQ7XG4gICAgICAgIGlmICghKHRhcmdldEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0RWxlbWVudC52YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KENVU1RPTV9FVkVOVF9UWVBFW2V2ZW50VHlwZV0sIHZhbHVlKTtcbiAgICB9XG4gICAgcmVtb3ZlRXZlbnQoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuICAgICAgICBpZiAoIXRhcmdldClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5vZmYoe1xuICAgICAgICAgICAgLi4udGhpcy5ldmVudExpc3RlbmVycy5kcm9wRG93bixcbiAgICAgICAgICAgIHRhcmdldDogJCh0YXJnZXQgPz8gXCJcIikgPz8gZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImNvbW1vbi1kcm9wZG93blwiLCBDb21tb25Ecm9wZG93bik7XG4iLCJleHBvcnQgY29uc3QgY3JlYXRlT3B0aW9uRWxlbWVudHMgPSAob3B0aW9ucywgY2FsbGJhY2sgPSAob3B0aW9uVmFsdWUpID0+IG9wdGlvblZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMob3B0aW9ucylcbiAgICAgICAgLm1hcCgob3B0aW9uVmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8b3B0aW9uIHZhbHVlPSR7b3B0aW9uVmFsdWV9PiR7Y2FsbGJhY2sob3B0aW9uVmFsdWUpfTwvb3B0aW9uPmA7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbW1vbk1vZGFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29tbW9uTW9kYWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9Db21tb25Nb2RhbC5jc3NcIjtcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9CYXNlQ29tcG9uZW50L0Jhc2VDb21wb25lbnRcIjtcbmltcG9ydCB7ICQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvZG9tXCI7XG5pbXBvcnQgeyBpc0N1c3RvbUV2ZW50VHlwZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy90eXBlR3VhcmRcIjtcbmNsYXNzIENvbW1vbk1vZGFsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGhhbmRsZU9wZW46ICh0YXJnZXRTZWxlY3RvcikgPT4gdGhpcy5oYW5kbGVPcGVuKHRhcmdldFNlbGVjdG9yKSxcbiAgICAgICAgICAgIGhhbmRsZUNsb3NlOiAodGFyZ2V0U2VsZWN0b3IpID0+IHRoaXMuaGFuZGxlQ2xvc2UodGFyZ2V0U2VsZWN0b3IpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5pbm5lckhUTUw7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICA8ZGlhbG9nIGlkPVwiY29tbW9uLW1vZGFsLWRpYWxvZ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1iYWNrZHJvcFwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICR7Y2hpbGRyZW59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGlhbG9nPlxuICAgICAgYDtcbiAgICB9XG4gICAgc2V0RXZlbnQoKSB7XG4gICAgICAgIGNvbnN0IG9wZW5TdGF0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwib3BlblwiKSA/PyBcIlwiO1xuICAgICAgICBjb25zdCBjbG9zZVN0YXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJjbG9zZVwiKSA/PyBcIlwiO1xuICAgICAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHRoaXMuZ2V0QXR0cmlidXRlKFwidGFyZ2V0U2VsZWN0b3JcIikgPz8gXCJcIjtcbiAgICAgICAgaWYgKCFpc0N1c3RvbUV2ZW50VHlwZShvcGVuU3RhdGUpIHx8ICFpc0N1c3RvbUV2ZW50VHlwZShjbG9zZVN0YXRlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5vbih7XG4gICAgICAgICAgICBldmVudE5hbWU6IG9wZW5TdGF0ZSxcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5ldmVudEhhbmRsZXJzLmhhbmRsZU9wZW4uYmluZCh0aGlzLCB0YXJnZXRTZWxlY3RvciksXG4gICAgICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbih7XG4gICAgICAgICAgICBldmVudE5hbWU6IGNsb3NlU3RhdGUsXG4gICAgICAgICAgICBldmVudEhhbmRsZXI6IHRoaXMuZXZlbnRIYW5kbGVycy5oYW5kbGVDbG9zZS5iaW5kKHRoaXMsIHRhcmdldFNlbGVjdG9yKSxcbiAgICAgICAgICAgIHRhcmdldDogZG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVFdmVudCgpIHtcbiAgICAgICAgY29uc3Qgb3BlblN0YXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJvcGVuXCIpID8/IFwiXCI7XG4gICAgICAgIGNvbnN0IGNsb3NlU3RhdGUgPSB0aGlzLmdldEF0dHJpYnV0ZShcImNsb3NlXCIpID8/IFwiXCI7XG4gICAgICAgIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0YXJnZXRTZWxlY3RvclwiKSA/PyBcIlwiO1xuICAgICAgICBpZiAoIWlzQ3VzdG9tRXZlbnRUeXBlKG9wZW5TdGF0ZSkgfHwgIWlzQ3VzdG9tRXZlbnRUeXBlKGNsb3NlU3RhdGUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLm9mZih7XG4gICAgICAgICAgICBldmVudE5hbWU6IG9wZW5TdGF0ZSxcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcjogdGhpcy5ldmVudEhhbmRsZXJzLmhhbmRsZU9wZW4uYmluZCh0aGlzLCB0YXJnZXRTZWxlY3RvciksXG4gICAgICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vZmYoe1xuICAgICAgICAgICAgZXZlbnROYW1lOiBjbG9zZVN0YXRlLFxuICAgICAgICAgICAgZXZlbnRIYW5kbGVyOiB0aGlzLmV2ZW50SGFuZGxlcnMuaGFuZGxlQ2xvc2UuYmluZCh0aGlzLCB0YXJnZXRTZWxlY3RvciksXG4gICAgICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGFuZGxlT3Blbih0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCBkaWFsb2dFbGVtZW50ID0gJChgJHt0YXJnZXRTZWxlY3Rvcn0+ZGlhbG9nYCk7XG4gICAgICAgIGlmIChkaWFsb2dFbGVtZW50IGluc3RhbmNlb2YgSFRNTERpYWxvZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGRpYWxvZ0VsZW1lbnQuc2hvd01vZGFsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlQ2xvc2UodGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgZGlhbG9nRWxlbWVudCA9ICQoYCR7dGFyZ2V0U2VsZWN0b3J9PmRpYWxvZ2ApO1xuICAgICAgICBpZiAoZGlhbG9nRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxEaWFsb2dFbGVtZW50KSB7XG4gICAgICAgICAgICBkaWFsb2dFbGVtZW50LmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJjb21tb24tbW9kYWxcIiwgQ29tbW9uTW9kYWwpO1xuIiwiaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL0Jhc2VDb21wb25lbnQvQmFzZUNvbXBvbmVudFwiO1xuY2xhc3MgQ29tbW9uRm9ybUl0ZW0gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsVGFyZ2V0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJmb3JcIikgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgY2xhc3NMaXN0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJjbGFzc0xpc3RcIikgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJsYWJlbFRleHRcIikgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmlubmVySFRNTDtcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pdGVtICR7Y2xhc3NMaXN0fVwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2xhYmVsVGFyZ2V0fVwiIHRleHQtY2FwdGlvblwiPiR7bGFiZWxUZXh0fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgJHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImNvbW1vbi1mb3JtLWl0ZW1cIiwgQ29tbW9uRm9ybUl0ZW0pO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwibmMiLCJCYXNlQ29tcG9uZW50IiwiSFRNTEVsZW1lbnQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInJlbmRlciIsInNldEV2ZW50IiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJyZW1vdmVFdmVudCIsImdldFRlbXBsYXRlIiwiZW1pdCIsImV2ZW50VHlwZSIsImRldGFpbCIsImN1c3RvbUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiZGlzcGF0Y2hFdmVudCIsIm9uIiwiZXZlbnROYW1lIiwiZXZlbnRIYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImlubmVySFRNTCIsIiQiLCJzZWxlY3RvciIsIkVMRU1FTlRfU0VMRUNUT1IiLCJDVVNUT01fRVZFTlRfVFlQRSIsInNvcnRDaGFuZ2UiLCJyZXJlbmRlclJlc3RhdXJhbnRMaXN0IiwiZmlsdGVyQ2F0ZWdvcnkiLCJyZXNldEZvcm0iLCJyZXN0YXVyYW50RGV0YWlsTW9kYWxPcGVuIiwicmVzdGF1cmFudERldGFpbE1vZGFsQ2xvc2UiLCJyZXN0YXVyYW50QWRkTW9kYWxPcGVuIiwicmVzdGF1cmFudEFkZE1vZGFsQ2xvc2UiLCJyZXJlbmRlck1vZGFsIiwiY2hhbmdlVGFiIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImFyZ3VtZW50cyIsImV2ZW50TGlzdGVuZXJzIiwiZ25iQnV0dG9uQ2xpY2siLCJoYW5kbGVPcGVuTW9kYWwiLCJiaW5kIiwiU1RPUkFHRV9LRVlTIiwicmVzdGF1cmFudERldGFpbHMiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJzZXQiLCJyZXN0YXVyYW50RGV0YWlsIiwiZXhpc3RpbmdSZXN0YXVyYW50RGV0YWlscyIsInNldEl0ZW0iLCJyZXN0YXVyYW50TmFtZSIsImZpbHRlcmVkUmVzdGF1cmFudHNEZXRhaWxzIiwiZmlsdGVyIiwibmFtZSIsIlVSTF9SRUdFWFAiLCJ2YWxpZGF0aW9uVHlwZXMiLCJlbXB0eUNhdGVnb3J5IiwiZXJyb3JNZXNzYWdlIiwiaXNWYWxpZCIsInVzZXJJbnB1dFJlc3RhdXJhbnREZXRhaWwiLCJjYXRlZ29yeSIsImVtcHR5UmVzdGF1cmFudE5hbWUiLCJlbXB0eURpc3RhbmNlIiwiZGlzdGFuY2UiLCJkdXBsaWNhdGVOYW1lcyIsImV2ZXJ5IiwiaW52YWxpZFVybEZvcm1hdCIsInVybCIsInRlc3QiLCJjaGVjayIsInZhbHVlIiwidmFsdWVzIiwiZm9yRWFjaCIsIk1FTlVfQ0FURUdPUklFUyIsImFsbCIsImtvcmVhbiIsImNoaW5lc2UiLCJqYXBhbmVzZSIsIndlc3Rlcm4iLCJhc2lhbiIsIm90aGVycyIsIlNPUlRfQ0FURUdPUklFU19UWVBFIiwiUkVTVEFVUkFOVF9UQUJfU1RBVFVTX1RBQkxFIiwic3RvcmFnZSIsImN1cnJlbnRDYXRlZ29yeSIsInNvcnRUeXBlIiwicmVzdGF1cmFudHNEZXRhaWxzIiwiZ2V0U29ydGVkUmVzdGF1cmFudHMiLCJ0YWJTdGF0dXMiLCJpc0Zhdm9yaXRlU2VsZWN0ZWQiLCJpc0Zhdm9yaXRlIiwic29ydCIsImIiLCJsb2NhbGVDb21wYXJlIiwiTnVtYmVyIiwiZ2V0UmVzdGF1cmFudERldGFpbHMiLCJ1cGRhdGVSZXN0YXVyYW50cyIsImFkZFJlc3RhdXJhbnQiLCJzb3J0UmVzdGF1cmFudHMiLCJmaWx0ZXJSZXN0YXVyYW50cyIsImZpbHRlclR5cGUiLCJ2YWxpZGF0ZVJlc3RhdXJhbnREZXRhaWwiLCJnZXRSZXN0YXVyYW50RGV0YWlsQnlOYW1lIiwiZmluZCIsInVwZGF0ZVJlc3RhdXJhbnREZXRhaWxJbklzRmF2b3JpdGUiLCJ1cGRhdGVSZXN0YXVyYW50RGV0YWlsIiwicmVzdGF1cmFudHNEZXRhaWwiLCJyZW1vdmVSZXN0YXVyYW50RGV0YWlsIiwidGFyZ2V0TmFtZSIsInJlc3RhdXJhbnQiLCJnZXRBdHRyaWJ1dGUiLCJoYW5kbGVSZXJlbmRlclJlc3RhdXJhbnRMaXN0IiwiaGFuZGxlU29ydFJlc3RhdXJhbnRJdGVtcyIsImhhbmRsZUZpbHRlclJlc3RhdXJhbnRJdGVtcyIsImNyZWF0ZVJlc3RhdXJhbnRJdGVtcyIsInJlZHVjZSIsImFjYyIsImRlc2NyaXB0aW9uIiwiZXZlbnQiLCJsaXN0SXRlbUNsaWNrIiwiaGFuZGxlQ2xpY2tJdGVtIiwiY3VycmVudFRhcmdldCIsInRleHRDb250ZW50IiwiRVJST1JfVEFSR0VUX0VMRU1FTlRTX0RJQ1RJT05BUlkiLCJpc0N1c3RvbUV2ZW50VHlwZSIsImhhbmRsZVJlc2V0Rm9ybSIsInJlc3RhdXJhbnRBZGRGb3JtU3VibWl0IiwiaGFuZGxlU3VibWl0QWRkUmVzdGF1cmFudCIsIm1vZGFsQ2FuY2VsQnV0dG9uQ2xpY2siLCJoYW5kbGVDYW5jZWxCdXR0b24iLCJtZW51Q2F0ZWdvcnlXaXRob3V0QWxsT3B0aW9ucyIsInNsaWNlIiwiRElTVEFOQ0VTX09QVElPTlMiLCJmb3JtRWxlbWVudCIsIkhUTUxGb3JtRWxlbWVudCIsInJlc2V0IiwicHJldmVudERlZmF1bHQiLCJhZGRVc2VySW5wdXRSZXN0YXVyYW50RGV0YWlsIiwiZXJyb3IiLCJoYW5kbGVFcnJvciIsImFsZXJ0IiwibWVzc2FnZSIsImlzVmFsaWRFcnJvck1lc3NhZ2VLZXkiLCJmb2N1cyIsImNyZWF0ZUZvcm1EYXRhVG9SZXN0YXVyYW50RGV0YWlsIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInVzZXJJbnB1dFZhbHVlcyIsImVudHJpZXMiLCJrZXlzIiwiaW5jbHVkZXMiLCJpc1VzZXJJbnB1dFZhbHVlcyIsIm1hdGNoZXMiLCJoYW5kbGVPcGVuUmVzdGF1cmFudERldGFpbE1vZGFsIiwiaGFuZGxlQ2xvc2VSZXN0YXVyYW50RGV0YWlsTW9kYWwiLCJtb2RhbENhbmNlbEJ1dHRvbkVsZW1lbnQiLCJkZWxldGVSZXN0YXVyYW50SXRlbSIsImhhbmRsZURlbGV0ZVJlc3RhdXJhbnRJdGVtIiwiaGFuZGxlUmVyZW5kZXJNb2RhbENvbnRlbnQiLCJtb2RhbERlbGV0ZUJ1dHRvbkVsZW1lbnQiLCJoYW5kbGVDaGFuZ2VUYWJTdGF0dXMiLCJtZW51Q2F0ZWdvcnlPcHRpb25zIiwic29ydENhdGVnb3J5T3B0aW9ucyIsImJ1dHRvbkNsaWNrIiwiaGFuZGxlQ2xpY2siLCJpc0FjdGl2ZVRhYiIsImJ1dHRvblRleHQiLCJIVE1MQnV0dG9uRWxlbWVudCIsImNhdGVnb3J5SW1hZ2UiLCJ0YXJnZXRNZW51Q2F0ZWdvcnkiLCJzb21lIiwibWVudUNhdGVnb3J5IiwiY29udmVydENhdGVnb3J5VG9JbWFnZSIsInN0YXJJY29uQ2xpY2siLCJoYW5kbGVDbGlja1N0YXJJY29uIiwidGFyZ2V0RWxlbWVudCIsImRyb3BEb3duIiwiaGFuZGxlQ2hhbmdlIiwiY2xhc3NMaXN0Iiwic3BsaXQiLCJ0aXRsZSIsImFkZE9wdGlvblRleHQiLCJjYWxsYmFjayIsIm9wdGlvblZhbHVlIiwiY3JlYXRlT3B0aW9uRWxlbWVudHMiLCJIVE1MU2VsZWN0RWxlbWVudCIsImV2ZW50SGFuZGxlcnMiLCJoYW5kbGVPcGVuIiwidGFyZ2V0U2VsZWN0b3IiLCJoYW5kbGVDbG9zZSIsImNoaWxkcmVuIiwib3BlblN0YXRlIiwiY2xvc2VTdGF0ZSIsImRpYWxvZ0VsZW1lbnQiLCJIVE1MRGlhbG9nRWxlbWVudCIsInNob3dNb2RhbCIsImNsb3NlIiwibGFiZWxUYXJnZXQiLCJsYWJlbFRleHQiXSwic291cmNlUm9vdCI6IiJ9